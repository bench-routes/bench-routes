{"version":3,"sources":["components/notification/Notification.tsx","components/layouts/Header.tsx","components/layouts/Sidebar.tsx","components/layouts/BaseLayout.tsx","utils/useFetch.ts","components/dashboard/ServiceState.tsx","utils/types.ts","components/dashboard/RoutesSummary.tsx","components/dashboard/Dashboard.tsx","utils/connection.ts","components/layouts/Charts.tsx","components/layouts/Submenu.tsx","components/service-ui/publicOpts.ts","components/service-ui/getChartOptions.ts","components/service-ui/FloodPing.tsx","components/service-ui/Jitter.tsx","components/service-ui/Monitoring.tsx","components/service-ui/Ping.tsx","components/settings/Settings.tsx","router/Navigation.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Notification","className","this","props","showNotification","src","alt","onClick","updateShowNotificationsScreen","onKeyDown","e","keyCode","React","Component","Header","useState","setShowNotification","Sidebar","showSubmenu","setShowSubmenu","to","style","textDecoration","Collapse","isOpen","key","BaseLayout","children","useFetch","url","options","status","response","setResponse","error","setError","isLoading","setIsLoading","useEffect","a","fetch","cache","credentials","res","ok","Error","statusText","json","fetchData","ConditionalBadge","Key","value","Badge","color","ServicesState","Alert","type","data","states","padding","height","ping","jitter","floodping","monitoring","Spinner","section","head","sub","labels","paddingBottom","borderBottom","map","l","i","RoutesSummary","console","warn","log","routes","testServicesRoutes","monitoringRoutes","Card","component","marginLeft","marginRight","margin","border","borderRadius","width","overflowY","overflowX","fontWeight","Dashboard","BRConnect","store","socketConn","urlSocketConn","routeDetails","WebSocket","onopen","send","sendMessage","sendMessageOperateModule","route","inst","sendAndReceiveMessage","JSON","stringify","message","Promise","rej","onmessage","m","onerror","CONNECTING","dataJSON","parse","ChartValues","xAxisValues","yAxisValues","label","colorCode","backgroundColor","borderColor","fill","lineTension","pBackgroundColor","pBorderColor","pBorderWidth","pHoverBackgroundColor","pHoverBorderColor","pHoverBorderWidth","pHoverRadius","pRadius","Charts","push","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointHoverRadius","pointRadius","datasets","formatProps","opts","Submenu","BRinstance","sendAddress","module","getAddress","state","urlSlot","methodSlot","routeSlot","paramSlot","setState","then","submodule","length","onChange","target","val","id","method","operation","connection","signalPingStart","alert","signalJitterStart","signalFloodPingStart","signalPingStop","signalJitterStop","signalFloodPingStop","getChartOptions","yMin","yMean","yMax","yMdev","norTime","timeStamp","Min","Mean","Max","Mdev","relative","timestamp","FloodPing","optionsPacketLoss","show","chart","setChart","sAddressParam","signalFloodPingRouteFetchAllTimeSeries","overflow","Jitter","signalJitterRouteFetchAllTimeSeries","datapoint","Monitoring","getAddressSubmenu","showChart","substring","split","sAddress","signalRequestResponseRouteFetchAllTimeSeries","d","r","resLength","delay","optionsResponse","responseLengthOpts","tmp","Ping","signalPingRouteFetchAllTimeSeries","Settings","Navigator","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.827a8c16.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\n\nexport default class Notification extends React.Component<{\n  showNotification: boolean;\n  updateShowNotificationsScreen: () => void;\n}> {\n  public render() {\n    return (\n      <div\n        className={`notification ${\n          this.props.showNotification\n            ? 'display-notification'\n            : 'close-notification'\n        }`}\n      >\n        <div className=\"notification-content\">\n          <div className=\"notification-header\">\n            <div>Notifications</div>\n            <img\n              src=\"assets/icons/cross.svg\"\n              alt=\"collapse notifications\"\n              className=\"notification-close\"\n              onClick={() => this.props.updateShowNotificationsScreen()}\n              onKeyDown={e => {\n                if (e.keyCode === 13) {\n                  return this.props.updateShowNotificationsScreen();\n                }\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"notification-body\">this is notification screen</div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React, { useState } from 'react';\nimport Notification from '../notification/Notification';\n\nexport default function Header() {\n  const [showNotification, setShowNotification] = useState(false);\n\n  const updateShowNotificationsScreen = () => {\n    setShowNotification(!showNotification);\n  };\n\n  return (\n    <>\n      <Notification\n        showNotification={showNotification}\n        updateShowNotificationsScreen={updateShowNotificationsScreen}\n      />\n      <header>\n        <div className=\"logo-name\">Bench-routes</div>\n        {!showNotification ? (\n          <div className=\"notification-icon\">\n            <img\n              src=\"assets/icons/notify-icon.svg\"\n              alt=\"notification\"\n              onClick={() => updateShowNotificationsScreen()}\n              onKeyDown={e => {\n                if (e.keyCode === 13) {\n                  updateShowNotificationsScreen();\n                }\n              }}\n            />\n          </div>\n        ) : (\n          <div />\n        )}\n      </header>\n    </>\n  );\n}\n","import React, { FC, useState } from 'react';\nimport { HashRouter as Router, Link } from 'react-router-dom';\nimport './layouts.style.css';\nimport { Collapse } from 'reactstrap';\n\nconst Sidebar: FC<{}> = () => {\n  const [showSubmenu, setShowSubmenu] = useState(false);\n  const toggleBenchmarkSubmenu = () => {\n    setShowSubmenu(!showSubmenu);\n  };\n\n  return (\n    <Router>\n      <div className=\"sidebar\">\n        <div className=\"sidebar-content\">\n          <Link to=\"/\" style={{ textDecoration: 'none' }}>\n            <div>\n              <div className=\"sidebar-inner\">\n                <img\n                  src=\"assets/icons/dashboard-icon.svg\"\n                  className=\"sidebar-inner\"\n                  alt=\"dashboard\"\n                />\n                <div className=\"sidebar-head sidebar-inner\">Dashboard</div>\n              </div>\n            </div>\n          </Link>\n          <Link to=\"/monitoring\" style={{ textDecoration: 'none' }}>\n            <div className=\"sidebar-inner\">\n              <img\n                src=\"assets/icons/monitoring-icon.svg\"\n                className=\"sidebar-inner\"\n                alt=\"monitoring\"\n              />\n              <div className=\"sidebar-head sidebar-inner\">Monitoring</div>\n            </div>\n          </Link>\n\n          <div onClick={() => toggleBenchmarkSubmenu()}>\n            <div className=\"sidebar-inner benchmarking\">\n              <img\n                src=\"assets/icons/bench-icon.svg\"\n                className=\"sidebar-inner\"\n                alt=\"Tests\"\n              />\n              <div className=\"sidebar-head sidebar-inner\">Tests</div>\n            </div>\n          </div>\n\n          <div className=\"benchmark-submenu\">\n            <Collapse isOpen={showSubmenu}>\n              <div key=\"compulsory_transition_key\">\n                <Link to=\"/ping\" style={{ textDecoration: 'none' }}>\n                  <div>\n                    <div className=\"sidebar-inner\">\n                      <img\n                        src=\"assets/icons/ping-meter.svg\"\n                        className=\"sidebar-submenu-inner\"\n                        alt=\"Benchmarks\"\n                      />\n                      <div className=\"sidebar-head sidebar-inner\">Ping</div>\n                    </div>\n                  </div>\n                </Link>\n                <Link to=\"/floodping\" style={{ textDecoration: 'none' }}>\n                  <div>\n                    <div className=\"sidebar-inner\">\n                      <img\n                        src=\"assets/icons/flood-icon.png\"\n                        className=\"sidebar-submenu-inner\"\n                        alt=\"Flood-Ping\"\n                      />\n                      <div className=\"sidebar-head sidebar-inner\">\n                        Floodping\n                      </div>\n                    </div>\n                  </div>\n                </Link>\n                <Link to=\"/jitter\" style={{ textDecoration: 'none' }}>\n                  <div>\n                    <div className=\"sidebar-inner\">\n                      <img\n                        src=\"assets/icons/jitter-icon.png\"\n                        className=\"sidebar-submenu-inner\"\n                        alt=\"Jitter\"\n                      />\n                      <div className=\"sidebar-head sidebar-inner\">Jitter</div>\n                    </div>\n                  </div>\n                </Link>\n              </div>\n            </Collapse>\n          </div>\n\n          <div className=\"sidebar-bottom-links\">\n            <Link to=\"/settings\" style={{ textDecoration: 'none' }}>\n              <div>\n                <div className=\"sidebar-inner\">\n                  <img\n                    src=\"assets/icons/settings-icon.svg\"\n                    className=\"sidebar-inner\"\n                    alt=\"settings\"\n                  />\n                  <div className=\"sidebar-head sidebar-inner\">Settings</div>\n                </div>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\n\nexport default function BaseLayout(props) {\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        <Sidebar />\n      </div>\n      <div className=\"inner-component\">\n        <Header />\n        {props.children}\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport type APIResponse<T> = { status: string; data?: T };\n\nexport interface FetchState<T> {\n  response: APIResponse<T>;\n  error?: Error;\n  isLoading: boolean;\n}\n\nexport const useFetch = <T extends {}>(url: string, options?: RequestInit): FetchState<T> => {\n  const [response, setResponse] = useState<APIResponse<T>>({ status: 'start fetching' });\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, { cache: 'no-cache', credentials: 'same-origin', ...options });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const json = (await res.json()) as APIResponse<T>;\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, [url, options]);\n  return { response, error, isLoading };\n};\n","import React, { FC } from 'react';\nimport { service_states, HOST_IP } from '../../utils/types';\nimport { useFetch } from '../../utils/useFetch';\nimport { Alert, Spinner, Badge } from 'reactstrap';\n\ninterface ConditionalBadgeProps {\n  Key: string;\n  value: string;\n}\n\nconst ConditionalBadge: FC<ConditionalBadgeProps> = ({ Key, value }) => {\n  if (value === 'active') {\n    return <Badge color=\"warning\">{`${Key}: ${value}`}</Badge>;\n  } else {\n    return <Badge color=\"danger\">{`${Key}: ${value}`}</Badge>;\n  }\n};\n\nexport const ServicesState: FC<{}> = () => {\n  const { response, error } = useFetch<service_states>(\n    `${HOST_IP}/service-state`\n  );\n\n  if (error) {\n    return <Alert type=\"error\">Error: unable to reach the service.</Alert>;\n  } else if (response.data) {\n    const states: service_states = response.data;\n\n    return (\n      <div className=\"row\" style={{ padding: '4%', height: '15vh' }}>\n        <div className=\"col-md-6\">\n          <ConditionalBadge Key=\"Ping\" value={states.ping} />\n        </div>\n        <div className=\"col-md-6\">\n          <ConditionalBadge Key=\"Jitter\" value={states.jitter} />\n        </div>\n        <div className=\"col-md-6\">\n          <ConditionalBadge Key=\"Flood-Ping\" value={states.floodping} />\n        </div>\n        <div className=\"col-md-6\">\n          <ConditionalBadge Key=\"Moitoring\" value={states.monitoring} />\n        </div>\n      </div>\n    );\n  }\n\n  return <Spinner color=\"info\" />;\n};\n","export interface SystemInformation {\n  sysinfo: sysinfo;\n  node: node;\n  os: os;\n  kernel: kernel;\n  product: product;\n  board: board;\n  chassis: chassis;\n  bios: bios;\n  cpu: cpu;\n  memory: memory;\n  storage: storage[];\n  network: network[];\n}\n\ninterface sysinfo {\n  version: string;\n  timestamp: string;\n}\n\ninterface node {\n  hostname: string;\n  machineid: string;\n}\n\ninterface os {\n  name: string;\n  vendor: string;\n  version: string;\n  architecture: string;\n}\n\ninterface kernel {\n  release: string;\n  version: number;\n  architecture: string;\n}\n\ninterface product {\n  name: string;\n  vendor: string;\n  version: string;\n}\n\ninterface board {\n  name: string;\n  vendor: string;\n  version: string;\n}\n\ninterface chassis {\n  type: number;\n  vendor: string;\n  version: string;\n}\n\ninterface bios {\n  vendor: string;\n  version: string;\n  date: string;\n}\n\ninterface cpu {\n  vendor: string;\n  model: string;\n  cache: number;\n  cpus: number;\n  cores: number;\n  threads: number;\n}\n\ninterface memory {}\n\ninterface storage {\n  name: string;\n  driver: string;\n  vendor: string;\n  model: string;\n  serial: string;\n  size: number;\n}\n\ninterface network {\n  name: string;\n  driver: string;\n  macaddress: string;\n  port: string;\n  speed: number;\n}\n\nexport interface service_states {\n  ping: string;\n  floodping: string;\n  jitter: string;\n  monitoring: string;\n}\n\nexport const HOST_IP = 'http://localhost:9090';\n\nexport interface Datasets {\n  label: string;\n  fill: boolean;\n  lineTension: number;\n  backgroundColor: string;\n  borderColor: string;\n  pointBorderColor: string;\n  pointBackgroundColor: string;\n  pointBorderWidth: number;\n  pointHoverRadius: number;\n  pointHoverBackgroundColor: string;\n  pointHoverBorderColor: string;\n  pointHoverBorderWidth: number;\n  pointRadius: number;\n  data: any[];\n}\n\n","import React, { FC } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { HOST_IP } from '../../utils/types';\nimport { Alert, Spinner, Badge } from 'reactstrap';\n\ninterface RoutesSummaryResponses {\n  testServicesRoutes: string[];\n  monitoringRoutes: string[];\n}\n\nconst section = (head: string, sub: string, labels: string[]) => (\n  <div>\n    <div style={{ paddingBottom: '1%', borderBottom: '1px solid #f1f1f3' }}>\n      <strong>{head}</strong> &nbsp;\n      {sub ? <sub>{sub}</sub> : null}\n    </div>\n    {labels.map((l: string, i: number) => (\n      <div key={i}>\n        <Badge color=\"primary\">{l}</Badge>\n      </div>\n    ))}\n  </div>\n);\n\nexport const RoutesSummary: FC<{}> = () => {\n  const { response, error } = useFetch<RoutesSummaryResponses>(\n    `${HOST_IP}/routes-summary`\n  );\n  console.warn(response);\n\n  if (error) {\n    console.log(error);\n    return (\n      <Alert color=\"danger\">\n        Error: unable to fetch routes-summary details.\n      </Alert>\n    );\n  } else if (response.data) {\n    const routes = response.data;\n    return (\n      <div style={{ padding: '4%', height: '15vh' }}>\n        {section(\n          'Services',\n          'ping, jitter, floodping',\n          routes.testServicesRoutes\n        )}\n        {section('Monitoring', '', routes.monitoringRoutes)}\n      </div>\n    );\n  }\n\n  return (\n    <Alert color=\"warning\">\n      Fetching... <Spinner color=\"info\" />{' '}\n    </Alert>\n  );\n};\n","import React, { FC } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { ServicesState } from './ServiceState';\nimport { RoutesSummary } from './RoutesSummary';\n\nconst Card = (head: string, component: JSX.Element) => (\n  <div\n    className=\"col-md-6 row\"\n    style={{ marginLeft: '0px', marginRight: '0px' }}\n  >\n    <div\n      style={{\n        margin: '1%',\n        border: '1px solid #f1f1f3',\n        borderRadius: '5px',\n        width: '100%',\n        overflowY: 'scroll',\n        overflowX: 'hidden'\n      }}\n    >\n      {head ? (\n        <div\n          style={{\n            padding: '0% 2% 2% 2%',\n            fontWeight: 'bold',\n            borderBottom: '1px solid #f1f1f3',\n            width: '100%'\n          }}\n        >\n          {head}\n        </div>\n      ) : null}\n\n      {component}\n    </div>\n  </div>\n);\n\nconst Dashboard: FC<RouteComponentProps> = () => {\n  return (\n    <div className=\"row\" style={{ margin: '3%' }}>\n      {Card('Services state', <ServicesState />)}\n      {Card('', <RoutesSummary />)}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export interface RouteFetchAll {\n  url: string;\n}\n\ninterface StoreType {\n  routeDetails: any;\n}\n\nexport default class BRConnect {\n  public store: StoreType;\n  private socketConn: WebSocket;\n  private urlSocketConn: string;\n\n  constructor() {\n    this.store = {\n      routeDetails: {}\n    };\n    this.urlSocketConn = 'ws://localhost:9090/websocket';\n    this.socketConn = new WebSocket(this.urlSocketConn);\n    this.socketConn.onopen = () => {\n      this.socketConn.send('hi from br-e');\n\n      // initialise connection\n      this.routeDetails();\n    };\n  }\n\n  public routeDetails(): Promise<any> {\n    return this.sendMessage('route-details');\n  }\n\n  public signalPingStart(): Promise<any> {\n    return this.sendMessageOperateModule('force-start-ping');\n  }\n\n  public signalPingStop(): Promise<any> {\n    return this.sendMessageOperateModule('force-stop-ping');\n  }\n\n  public signalJitterStart(): Promise<any> {\n    return this.sendMessageOperateModule('force-start-jitter');\n  }\n\n  public signalJitterStop(): Promise<any> {\n    return this.sendMessageOperateModule('force-stop-jitter');\n  }\n\n  public signalFloodPingStart(): Promise<any> {\n    return this.sendMessageOperateModule('force-start-flood-ping');\n  }\n\n  public signalFloodPingStop(): Promise<any> {\n    return this.sendMessageOperateModule('force-stop-flood-ping');\n  }\n\n  public signalPingRouteFetchAllTimeSeries(route: string): Promise<any> {\n    const inst: RouteFetchAll = {\n      url: route\n    };\n    return this.sendAndReceiveMessage('Qping-route ' + JSON.stringify(inst));\n  }\n\n  public signalJitterRouteFetchAllTimeSeries(route: string): Promise<any> {\n    const inst: RouteFetchAll = {\n      url: route\n    };\n    return this.sendAndReceiveMessage('Qjitter-route ' + JSON.stringify(inst));\n  }\n\n  public signalFloodPingRouteFetchAllTimeSeries(route: string): Promise<any> {\n    const inst: RouteFetchAll = {\n      url: route\n    };\n    return this.sendAndReceiveMessage(\n      'Qflood-ping-route ' + JSON.stringify(inst)\n    );\n  }\n\n  public signalRequestResponseRouteFetchAllTimeSeries(route: string): Promise<any> {\n    const inst: RouteFetchAll = {\n      url: route\n    };\n    return this.sendAndReceiveMessage('Qrequest-response-delay-route ' + JSON.stringify(inst));\n  }\n\n  public signalReqResDelayRouteFetchAllTimeSeries(route: string): Promise<any> {\n    const inst: RouteFetchAll = {\n      url: route\n    };\n    return this.sendAndReceiveMessage(\n      'Qrequest-response-delay ' + JSON.stringify(inst)\n    );\n  }\n\n  private sendAndReceiveMessage(message: string): Promise<any> {\n    return new Promise((res: any, rej: any) => {\n      this.socketConn.send(message);\n      this.socketConn.onmessage = (m: any) => {\n        console.warn(m);\n        res(m);\n      };\n      this.socketConn.onerror = (e: any) => {\n        rej(e);\n      };\n    });\n  }\n\n  private sendMessageOperateModule(message: string): Promise<any> {\n    return new Promise((res: any, rej: any) => {\n      this.socketConn.send(message);\n      this.socketConn.onmessage = (m: any) => {\n        res(m);\n      };\n      this.socketConn.onerror = (e: any) => {\n        rej(e);\n      };\n    });\n  }\n\n  private sendMessage(message: string): Promise<any> {\n    return new Promise((res: any, rej: any) => {\n      if (this.socketConn.CONNECTING !== 0) {\n        this.socketConn.send(message);\n        this.socketConn.onmessage = (m: any) => {\n          const data: string = m.data;\n          const dataJSON: object = JSON.parse(data);\n          res(dataJSON);\n        };\n        this.socketConn.onerror = (e: any) => {\n          rej(e);\n        };\n      } else {\n        this.socketConn.onopen = () => {\n          this.socketConn.send('hi from br-e2');\n          this.socketConn.send(message);\n          this.socketConn.onmessage = (m: any) => {\n            const data: string = m.data;\n            const dataJSON: object = JSON.parse(data);\n            res(dataJSON);\n          };\n          this.socketConn.onerror = (e: any) => {\n            rej(e);\n          };\n        };\n      }\n    });\n  }\n}\n","import React, { FC } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Datasets } from '../../utils/types';\n\ninterface ChartProps {\n  opts: ChartOptions[];\n}\n\ninterface ChartFormattedOptions {\n  datasets: Datasets[];\n  labels: any[];\n}\n\nexport interface ChartOptions {\n  xAxisValues: any[];\n  yAxisValues: any[];\n  fill: boolean;\n  lineTension: number;\n  backgroundColor: string;\n  borderColor: string;\n  pBorderColor: string;\n  pBackgroundColor: string;\n  pBorderWidth: number;\n  pHoverBorderWidth: number;\n  pHoverRadius: number;\n  pRadius: number;\n  label: string;\n  pHoverBackgroundColor: string;\n  pHoverBorderColor: string;\n}\n\nexport const ChartValues = (\n  xAxisValues?: any,\n  yAxisValues?: any,\n  label?: any,\n  colorCode?: any\n): ChartOptions => {\n  // If default values are required, then it can be called as `ChartValues();`\n  if (!xAxisValues && !yAxisValues && !label && !colorCode) {\n    return {\n      backgroundColor: '',\n      borderColor: '',\n      fill: false,\n      label: '',\n      lineTension: 0.1,\n      pBackgroundColor: '#fff',\n      pBorderColor: 'rgba(75,192,2,1)',\n      pBorderWidth: 1,\n      pHoverBackgroundColor: 'rgba(7,12,19,0.4)',\n      pHoverBorderColor: 'rgba(220,220,220,1)',\n      pHoverBorderWidth: 2,\n      pHoverRadius: 5,\n      pRadius: 1,\n      xAxisValues: [],\n      yAxisValues: []\n    };\n  }\n  return {\n    backgroundColor: colorCode,\n    borderColor: colorCode,\n    fill: false,\n    label,\n    lineTension: 0.1,\n    pBackgroundColor: '#fff',\n    pBorderColor: 'rgba(75,192,2,1)',\n    pBorderWidth: 1,\n    pHoverBackgroundColor: 'rgba(7,12,19,0.4)',\n    pHoverBorderColor: 'rgba(220,220,220,1)',\n    pHoverBorderWidth: 2,\n    pHoverRadius: 5,\n    pRadius: 1,\n    xAxisValues,\n    yAxisValues\n  };\n};\n\nexport const Charts: FC<ChartProps> = ({ opts }) => {\n  const formatProps = (options: ChartOptions[]): ChartFormattedOptions => {\n    const data: Datasets[] = [];\n    for (const i of options) {\n      data.push({\n        backgroundColor: i.backgroundColor,\n        borderColor: i.borderColor,\n        data: i.yAxisValues,\n        fill: i.fill,\n        label: i.label,\n        lineTension: i.lineTension,\n        pointBackgroundColor: i.pBackgroundColor,\n        pointBorderColor: i.pBorderColor,\n        pointBorderWidth: i.pBorderWidth,\n        pointHoverBackgroundColor: i.pBackgroundColor,\n        pointHoverBorderColor: i.pHoverBorderColor,\n        pointHoverBorderWidth: i.pHoverBorderWidth,\n        pointHoverRadius: i.pHoverRadius,\n        pointRadius: i.pRadius\n      });\n    }\n\n    return {\n      datasets: data,\n      labels: options[0].xAxisValues\n    };\n  };\n\n  const options = formatProps(opts);\n  const wrapper = 'canvas-chart-wrapper';\n\n  return (\n    <div className={wrapper} style={{ height: '100%' }}>\n      {options ? <Line data={options} /> : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport BRConnect from '../../utils/connection';\n\ninterface SubmenuPropsTypes {\n  module: string;\n  submodule: string;\n  getAddress: (sAddress: string) => void;\n}\n\ninterface RouterType {\n  headers: object[];\n  method: string;\n  params: object[];\n  url: string;\n}\n\ninterface SubmenuStateTypes {\n  module: string;\n  urlSlot: string;\n  methodSlot: string;\n  routeSlot: string;\n  paramSlot: string;\n  routes: any;\n}\n\nexport default class Submenu extends React.Component<\n  SubmenuPropsTypes,\n  SubmenuStateTypes\n> {\n  private BRinstance: BRConnect;\n  constructor(props: SubmenuPropsTypes) {\n    super(props);\n\n    const tmp: RouterType[] = [];\n    this.BRinstance = new BRConnect();\n    this.state = {\n      methodSlot: '',\n      module: '',\n      paramSlot: '',\n      routeSlot: '',\n      routes: tmp,\n      urlSlot: ''\n    };\n  }\n\n  public componentDidMount() {\n    this.setState({ module: this.props.module });\n    this.BRinstance.routeDetails().then((res: any) => {\n      this.setState({ routes: res.routes });\n    });\n  }\n\n  public sendAddress = () => {\n    console.warn('inside sendAddress');\n    switch (this.props.module) {\n      case 'ping':\n        this.props.getAddress(this.state.urlSlot);\n        break;\n      case 'jitter':\n        this.props.getAddress(this.state.urlSlot);\n        break;\n      default:\n        this.props.getAddress(\n          this.state.urlSlot +\n            '/' +\n            this.state.methodSlot +\n            '/' +\n            this.state.routeSlot +\n            '/' +\n            this.state.paramSlot\n        );\n    }\n  };\n\n  public render() {\n    return (\n      <>\n        {/* submenu container */}\n        <div className=\"submenu-container\">\n          {/* Drop-down components */}\n          <div>\n            <span>\n              {/* IP / Domain */}\n              {(this.props.module === 'ping' ||\n                this.props.module === 'jitter' ||\n                this.props.module === 'flood-ping') &&\n              this.props.submodule.length === 0 ? (\n                <span>\n                  <select\n                    className=\"submenu-style-general\"\n                    onChange={e => this.setState({ urlSlot: e.target.value })}\n                  >\n                    <option />\n                    {this.state.routes.length !== 0\n                      ? this.state.routes.map((val: RouterType, id: number) => (\n                          <option key={id} value={val.url}>\n                            {val.url}\n                          </option>\n                        ))\n                      : null}\n                  </select>\n                </span>\n              ) : (\n                <span>\n                  <select\n                    className=\"submenu-style-general\"\n                    onChange={e => this.setState({ urlSlot: e.target.value })}\n                  >\n                    <option />\n                    {this.state.routes.length !== 0\n                      ? this.state.routes.map((val: any, id: number) => (\n                          <option\n                            key={id}\n                            value={\n                              val.method + '  ' + val.url + '/' + val.route\n                            }\n                          >\n                            {val.method + '  ' + val.url + '/' + val.route}\n                          </option>\n                        ))\n                      : null}\n                  </select>\n                </span>\n              )}\n            </span>\n          </div>\n\n          <div className=\"float-right\">\n            <button\n              onClick={this.sendAddress}\n              className=\"submenu-show-graph btn-primary\"\n            >\n              Show\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import BRConnect from \"../../utils/connection\";\n\nexport const opts = (operation: string, connection : BRConnect, type: string): void => {\n    switch (operation) {\n      case 'start':\n          if(type==='ping')\n          {\n            \n              connection.signalPingStart().then(res => {\n                if (res.data) {\n                  alert('Ping routine started');\n                }\n              });\n          }\n          else if(type==='jitter')\n          {\n              \n            connection.signalJitterStart().then(res => {\n                if (res.data) {\n                  alert('Jitter routine started');\n                }\n              });\n          }\n          else if(type==='floodPing')\n          {\n             \n            connection.signalFloodPingStart().then(res => {\n                if (res.data) {\n                  alert('Flood Ping routine started');\n                }\n              });\n          }\n          else{\n              alert(\"Something went wrong\");\n          }\n        break;\n      case 'stop':\n          if(type==='ping')\n          {\n\n              connection.signalPingStop().then(res => {\n                if (res.data) {\n                  alert('Ping routine stopped');\n                }\n              });\n          }\n          else if(type==='jitter')\n          {\n            connection.signalJitterStop().then(res => {\n                if (res.data) {\n                  alert('Jitter routine stopped');\n                }\n              });\n          }\n          else if (type==='floodPing')\n          {\n            connection.signalFloodPingStop().then(res => {\n                if (res.data) {\n                  alert('Flood Ping routine stopped');\n                }\n              });\n          }\n          else{\n              alert(\"Something went wrong\");\n          }\n        break;\n    }\n  };","import { ChartOptions, ChartValues } from '../layouts/Charts';\n\nexport const getChartOptions=(data)=>{\n    console.log(\"inside getChartOptions\")\n    const yMin: ChartOptions[] = [];\n            const yMean: ChartOptions[] = [];\n            const yMax: ChartOptions[] = [];\n            const yMdev: ChartOptions[] = [];\n            const norTime: number[] = [];\n            const timeStamp: string[] = [];\n    \n            if (data.length === 0) {\n                // Probably send the required information\n                // to the user via br-logger\n                console.log('No data from the url');\n              } else {\n                let inst;\n                for (inst of data) {\n                  yMin.push(inst.Min);\n                  yMean.push(inst.Mean);\n                  yMax.push(inst.Max);\n                  yMdev.push(inst.Mdev);\n                  norTime.push(inst.relative);\n                  timeStamp.push(inst.timestamp);\n                }\n              }\n    \n    const options: ChartOptions[] = [\n        ChartValues(norTime, yMin, 'Minimum', 'rgba(75,192,192,0.4)'),\n        ChartValues(norTime, yMean, 'Mean', 'rgba(75,192,2,0.4)'),\n        ChartValues(norTime, yMax, 'Maximum', 'rgba(5,192,19,0.4)'),\n        ChartValues(norTime, yMdev, 'Standard-Deviation', 'rgba(7,12,19,0.4)')\n      ];\n\n      return options;\n}\n\n ","import React, { FC, useState } from 'react';\nimport BRConnect from '../../utils/connection';\nimport { ChartOptions, Charts, ChartValues } from '../layouts/Charts';\nimport Submenu from '../layouts/Submenu';\nimport { Alert } from 'reactstrap';\nimport { opts } from './publicOpts';\nimport { getChartOptions } from './getChartOptions';\n\nconst FloodPing: FC<{}> = () => {\n  const [chart, setChart] = useState({\n    options: [ChartValues()],\n    optionsPacketLoss: [ChartValues()],\n    show: false\n  });\n  const connection = new BRConnect();\n\n  const updateAddressSubmenu = (sAddressParam: string): void => {\n    setChart({\n      options: [ChartValues()],\n      show: true,\n      optionsPacketLoss: [ChartValues()]\n    });\n    connection\n      .signalFloodPingRouteFetchAllTimeSeries(sAddressParam)\n      .then((res: any) => {\n        const data: any[] = JSON.parse(res.data);\n        const norTime: number[] = [];\n        const packetLoss: number[] = [];\n\n        const options = getChartOptions(data);\n\n        const optionsPacketLoss: ChartOptions[] = [\n          ChartValues(\n            norTime,\n            packetLoss,\n            'Packet-loss',\n            'rgba(75,192,192,0.4)'\n          )\n        ];\n\n        setChart({ options, show: true, optionsPacketLoss });\n      });\n  };\n\n  return (\n    <>\n      <div className=\"btn-layout\">\n        <button\n          className=\"button-operations btn btn-success\"\n          onClick={() => opts('start', connection, 'floodPing')}\n        >\n          Start\n        </button>\n        <button\n          className=\"button-operations btn btn-danger\"\n          onClick={() => opts('stop', connection, 'floodPing')}\n        >\n          Stop\n        </button>\n      </div>\n      <Submenu module=\"ping\" submodule=\"\" getAddress={updateAddressSubmenu} />\n      {chart.show ? (\n        <div style={{ overflow: 'scroll', height: '45%' }}>\n          <Charts opts={chart.options} />\n          <Charts opts={chart.optionsPacketLoss} />\n        </div>\n      ) : (\n        <Alert color=\"warning\">\n          Select an option from the drop-down list for visualization.\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport default FloodPing;\n","import React, { FC, useState } from 'react';\nimport BRConnect from '../../utils/connection';\nimport { ChartOptions, Charts, ChartValues } from '../layouts/Charts';\nimport Submenu from '../layouts/Submenu';\nimport { Alert } from 'reactstrap';\nimport { opts } from './publicOpts';\nconst Jitter: FC<{}> = () => {\n  const [chart, setChart] = useState({\n    options: [ChartValues()],\n    show: false\n  });\n\n  const connection = new BRConnect();\n\n  const getAddressSubmenu = (sAddressParam: string): void => {\n    setChart({ options: [ChartValues()], show: false });\n    connection\n      .signalJitterRouteFetchAllTimeSeries(sAddressParam)\n      .then((res: any) => {\n        const data: any[] = JSON.parse(res.data) || [];\n        const jitter: ChartOptions[] = [];\n        const norTime: number[] = [];\n        const timeStamp: string[] = [];\n\n        if (data.length === 0) {\n          // Probably send the required information\n          // to the user via br-logger\n          console.log('No data from the url');\n        } else {\n          let inst;\n          for (inst of data) {\n            jitter.push(inst.datapoint);\n            norTime.push(inst.relative);\n            timeStamp.push(inst.timestamp);\n          }\n        }\n\n        const options: ChartOptions[] = [\n          ChartValues(norTime, jitter, 'Jitter', 'rgba(75,192,192,0.4)')\n        ];\n        setChart({ options, show: true });\n      });\n  };\n\n  return (\n    <>\n      <div className=\"btn-layout\">\n        <button\n          className=\"button-operations btn btn-success\"\n          onClick={() => opts('start', connection, 'jitter')}\n        >\n          Start\n        </button>\n        <button\n          className=\"button-operations btn btn-danger\"\n          onClick={() => opts('stop', connection, 'jitter')}\n        >\n          Stop\n        </button>\n      </div>\n      <Submenu module=\"jitter\" submodule=\"\" getAddress={getAddressSubmenu} />\n      {chart.show ? (\n        <div>\n          <Charts opts={chart.options} />\n        </div>\n      ) : (\n        <Alert color=\"warning\">\n          Select an option from the drop-down list for visualization.\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport default Jitter;\n","import React from 'react';\nimport BRConnect from '../../utils/connection';\nimport Submenu from '../layouts/Submenu';\nimport { ChartOptions, Charts, ChartValues } from '../layouts/Charts';\n\ninterface MonitoringModulePropsTypes {}\n\ninterface MonitoringModuleStateTypes {\n  routes: object;\n  sAddress: string;\n  showChart: boolean;\n  options: ChartOptions[];\n  responseLengthOpts: ChartOptions[];\n}\n\nexport default class Monitoring extends React.Component<\n  MonitoringModulePropsTypes,\n  MonitoringModuleStateTypes\n> {\n  private connection: BRConnect;\n  constructor(props: MonitoringModulePropsTypes) {\n    super(props);\n\n    this.connection = new BRConnect();\n    const tmp: ChartOptions[] = [ChartValues()];\n    this.state = {\n      // submenu address\n      routes: {},\n      sAddress: '',\n      showChart: false,\n      options: tmp,\n      responseLengthOpts: tmp\n    };\n  }\n\n  public getAddressSubmenu = (sAddressParam: string) => {\n    // Note that the sAddressParam should not contain any \"/\" in the end. If exists, trim it.\n    this.setState({ showChart: false });\n    sAddressParam = sAddressParam.substring(0, sAddressParam.length - 3);\n    sAddressParam = sAddressParam.split(' ')[2];\n    console.warn('addressSubmenu ', sAddressParam);\n    this.setState({ sAddress: sAddressParam });\n    this.connection\n      .signalRequestResponseRouteFetchAllTimeSeries(sAddressParam)\n      .then((res: any) => {\n        const data: any = JSON.parse(res.data);\n        const d: any = [];\n        const r: any = [];\n        const resLength: any = [];\n        for (const inst of data) {\n          r.push(inst.delay);\n          resLength.push(inst.resLength);\n          d.push(inst.relative);\n        }\n\n        const options: ChartOptions[] = [\n          ChartValues(d, r, 'Delay', 'rgba(75,192,192,0.4)')\n        ];\n\n        const optionsResponse: ChartOptions[] = [\n          ChartValues(d, resLength, 'Response-length', 'rgba(5,192,19,0.4)')\n        ];\n\n        this.setState({\n          options,\n          responseLengthOpts: optionsResponse,\n          showChart: true\n        });\n      });\n  };\n\n  public render() {\n    return (\n      <>\n        <div className=\"btn-layout\">\n          {/* operations */}\n          <button className=\"button-operations btn btn-success\">Start</button>\n          <button className=\"button-operations btn btn-danger\">Stop</button>\n        </div>\n        <Submenu\n          module=\"monitoring\"\n          submodule=\"\"\n          getAddress={this.getAddressSubmenu}\n        />\n        {this.state.showChart ? (\n          <div style={{ overflowY: 'scroll', height: '45%' }}>\n            <Charts opts={this.state.options} />\n            <Charts opts={this.state.responseLengthOpts} />\n          </div>\n        ) : (\n          <div>Chart not available</div>\n        )}\n      </>\n    );\n  }\n}\n","import React, { FC, useState } from 'react';\nimport BRConnect from '../../utils/connection';\nimport { Charts, ChartValues } from '../layouts/Charts';\nimport Submenu from '../layouts/Submenu';\nimport { Alert } from 'reactstrap';\nimport { opts } from './publicOpts';\nimport { getChartOptions } from './getChartOptions';\nconst Ping: FC<{}> = () => {\n  const [chart, setChart] = useState({\n    options: [ChartValues()],\n    show: false\n  });\n  const connection: BRConnect = new BRConnect();\n\n  const updateAddressSubmenu = (sAddressParam: string): void => {\n    setChart({ options: [ChartValues()], show: false });\n    connection\n      .signalPingRouteFetchAllTimeSeries(sAddressParam)\n      .then((res: any) => {\n        let data: any[] = JSON.parse(res.data) || [];\n\n        const options = getChartOptions(data);\n        setChart({ options, show: true });\n      });\n  };\n\n  return (\n    <>\n      <div className=\"btn-layout\">\n        <button\n          className=\"button-operations btn btn-success\"\n          onClick={() => opts('start', connection, 'ping')}\n        >\n          Start\n        </button>\n        <button\n          className=\"button-operations btn btn-danger\"\n          onClick={() => opts('stop', connection, 'ping')}\n        >\n          Stop\n        </button>\n      </div>\n      <div>\n        <Submenu module=\"ping\" submodule=\"\" getAddress={updateAddressSubmenu} />\n        {chart.show ? (\n          <div>\n            <Charts opts={chart.options} />\n          </div>\n        ) : (\n          <Alert color=\"warning\">\n            Select an option from the drop-down list for visualization.\n          </Alert>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Ping;\n","import React from 'react';\n\nexport default class Settings extends React.Component {\n  public render() {\n    return <div>This is Settings</div>;\n  }\n}\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from '../components/dashboard/Dashboard';\nimport FloodPing from '../components/service-ui/FloodPing';\nimport Jitter from '../components/service-ui/Jitter';\nimport Monitoring from '../components/service-ui/Monitoring';\nimport Ping from '../components/service-ui/Ping';\nimport Settings from '../components/settings/Settings';\n\nconst Navigator = () => (\n  <Router>\n    <Switch>\n      <Route exact={true} path=\"/\" component={Dashboard} />\n      <Route path=\"/monitoring\" component={Monitoring} />\n      <Route path=\"/ping\" component={Ping} />\n      <Route path=\"/floodping\" component={FloodPing} />\n      <Route path=\"/jitter\" component={Jitter} />\n      <Route path=\"/settings\" component={Settings} />\n    </Switch>\n  </Router>\n);\n\nexport default Navigator;\n","import React from 'react';\nimport './App.css';\nimport BaseLayout from './components/layouts/BaseLayout';\nimport Navigator from './router/Navigation';\n\nfunction App() {\n  return (\n    <BaseLayout>\n      <Navigator />\n    </BaseLayout>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n/* tslint:disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}