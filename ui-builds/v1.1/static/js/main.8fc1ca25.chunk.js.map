{"version":3,"sources":["utils/tableIcons.tsx","pages/Config/components/MaterialTable.tsx","utils/brt.ts","utils/types.ts","pages/Config/components/IntervalDetails.tsx","utils/useFetch.ts","pages/Dashboard/CPUUsage.tsx","pages/Dashboard/MemoryUsage.tsx","pages/Dashboard/Disk.tsx","pages/Dashboard/MemoryDetails.tsx","pages/Dashboard/SystemMetrics.tsx","utils/service.ts","pages/Input/Groups.tsx","pages/Input/GridBody.tsx","utils/parse.ts","pages/Input/Input.tsx","pages/Config/components/EditModal.tsx","services/config.ts","pages/Config/handles.ts","pages/Config/Config.tsx","utils/stringManipulations.ts","pages/Dashboard/JournalMetrics.tsx","pages/Dashboard/Dashboard.tsx","pages/FloodPing/index.tsx","pages/Monitoring/Jitter.tsx","utils/filterUrl.ts","pages/Jitter/JitterModule.tsx","pages/Monitoring/Columns.tsx","pages/Monitoring/Matrix.tsx","pages/Monitoring/ResLength.tsx","pages/Monitoring/Delay.tsx","pages/Monitoring/Ping.tsx","pages/Monitoring/RouteDetails.tsx","pages/Monitoring/Monitoring.tsx","pages/Ping/PingModule.tsx","router/Navigation.tsx","layouts/Sidebar.tsx","layouts/BaseLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","columns","field","title","render","rowData","methods","map","m","i","key","route","color","label","size","style","marginLeft","SearchTable","icons","marginTop","options","headerStyle","fontSize","fontWeight","TimeInstance","HOST_IP","IntervalDetails","useState","durationValue","inputValue","setInputValue","handleSubmit","e","intervalName","a","fetch","method","headers","body","JSON","stringify","value","then","res","json","response","status","toggleComponentView","reFetch","toggleResults","onSubmit","display","TextField","id","variant","onChange","target","handleIntervalOnChange","Button","type","textAlign","Typography","align","useFetch","url","setResponse","error","setError","isLoading","setIsLoading","requestSent","setRequestSent","useEffect","fetchData","cache","credentials","ok","Error","statusText","setTimeout","React","memo","series","name","data","cpuMetrics","chart","xaxis","categories","labels","show","rotate","rotateAlways","hideOverlappingLabels","trim","background","dataLabels","enabled","stroke","curve","lineCap","width","subtitle","text","fill","opacity","gradient","shade","shadeIntensity","inverseColors","opacityFrom","opacityTo","height","memoryUsagePercentMetrics","seriesDiskIO","diskIO","seriesCache","className","animations","easing","speed","animateGradually","delay","dynamicAnimation","availableBytes","freeBytes","totalBytes","usedBytes","formatTime","times","split","l","length","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","paper","SystemMetrics","showLoader","classes","setValue","endTimestamp","Date","getTime","Hour","err","Alert","severity","values","responseInFormat","metricValues","cpuUsageSlice","diskSliceCache","diskSliceDiskIO","memorySliceAvailableBytes","memorySliceFreeBytes","memorySliceTotalBytes","memorySliceUsedBytes","memoryUsedPercentSlice","metric","push","y","cpuTotalUsage","x","timestamp","disk","cached","memory","usedPercent","segregateMetrics","marginBottom","AppBar","position","Tabs","_event","newValue","indicatorColor","Tab","MemoryUsage","Disk","Type","slice","getRequestType","showDone","setShowDone","selectedRequest","setSelectedRequest","ButtonGroup","aria-label","onClick","sendType","toUpperCase","Badge","GridBody","updateParent","header","setHeader","bodyValue","setBodyValue","updateItems","parameters","undefined","head","margin","multiline","rows","content","inJSON","parse","pair","updateBody","minHeight","getRoutesMap","configRoutes","Map","forEach","uri","URL","has","set","get","Method","Body","Header","params","Params","populateParams","arr","param","Name","OfType","Value","requestsTypeSupported","hyperTexts","elevation","Input","screenType","updateCurrentModal","requestType","setRequestType","setHyperTextType","valueURLRoute","setValueURLRoute","applyHeader","setApplyHeader","headerValues","setHeaderValues","applyParams","setApplyParams","paramsValues","setParamsValues","applyBody","setApplyBody","bodyValues","setBodyValues","testInputResponse","setTestInputResponse","message","openSnackBar","setOpenSnackBar","showSnackBar","setShowSnackBar","open","setOpen","showResponseButton","setShowResponseButton","paramValues","Card","CardContent","toLowerCase","border","borderRadius","padding","FormControlLabel","control","Checkbox","checked","h","b","resp","orgRoute","testAndEdit","console","testURL","Dialog","DialogTitle","DialogContent","dividers","DialogActions","Snackbar","autoHideDuration","onClose","EditModal","isOpen","selectedRoute","updateConfigRoutes","modalUrl","setModalUrl","handleClose","fallback","CircularProgress","disableShrink","fullWidth","maxWidth","Chip","clickable","event","Object","keys","tabProps","routes","fetchConfigIntervals","setConfigIntervals","intervals","interval","test","Test","duration","Duration","unit","fetchConfigRoutes","setConfigRoutes","onRowDelete","oldData","actualRoute","lazy","_theme","diplay","cardStyle","h6","Config","configIntervals","ping","jitter","setToggleResults","editModalOpen","setEditModalOpen","selectedRow","setSelectedRow","handleToggle","Paper","Grid","container","spacing","str","n","item","lg","sm","xl","xs","justifyContent","gutterBottom","charAt","substr","Tooltip","cursor","Close","tableData","option","k","getTableData","Array","from","actions","icon","tooltip","editable","JournalMetrics","cerr","cwarn","cevents","ckerr","ckwarn","ckevents","format","seriesSystemd","seriesKernel","Dashboard","updateLoader","FloodPing","Jitter","filterUrl","startsWith","replace","datas","JitterModule","routesDetails","setRoutesDetails","testServicesRoutes","showCharts","setShowCharts","jitterData","setJitterData","v","matrix","formatdata","float","Autocomplete","onInputChange","newInputValue","getChartsData","renderInput","minWidth","toLocaleString","toFixed","round","num","parseInt","Math","Pad","Element","timeSeriesPath","showRouteDetails","setData","trigger","setTrigger","updating","setUpdating","warning","showWarning","fetchTimeSeriesDetails","instance","monitoringDetails","Promise","resolve","reject","path","matrixName","fetchDetails","details","inMatrixResponse","fetchMatrix","TableRow","TableCell","overflowX","avgValue","monitor","resLength","thickness","Matrix","TableContainer","maxHeight","overflowY","Table","stickyHeader","TableHead","column","TableBody","ResLength","Delay","Ping","min","mean","max","RouteDetailsComponent","routesChains","showDetails","responseDetailsDelay","responseDetailsResponse","pingMin","pingMean","pingMax","minValue","maxValue","ServicesState","isActive","setIsActive","fetchState","Switch","Monitoring","setShowRouteDetails","routeDetailsData","setRouteDetailsData","RouteDetails","PingModule","pingData","setPingData","Navigator","exact","component","nested","paddingLeft","drawerPaper","whiteSpace","transition","transitions","create","sharp","enteringScreen","drawerPaperClose","leavingScreen","breakpoints","up","toolbarIcon","alignItems","mixins","toolbar","settings","bottom","Sidebar","handleDrawerClose","testListOpen","setTestListOpen","showTestList","menuItems","ListItem","button","Link","to","ListItemIcon","ListItemText","primary","AccessAlarm","PostAdd","NetworkCheck","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","disablePadding","Settings","Drawer","clsx","IconButton","ChevronLeft","Divider","_useStyles","appBar","zIndex","drawer","appBarShift","paddingRight","menuButton","marginRight","menuButtonHidden","appBarSpacer","overflow","paddingTop","paddingBottom","BaseLayout","_classes","loader","setLoader","useCallback","CssBaseline","Toolbar","edge","Menu","noWrap","darkMode","toggleDarkMode","inputProps","LinearProgress","Container","App","setDarkMode","createMuiTheme","blue","typography","fontFamily","join","overrides","MuiAppBar","colorPrimary","grey","responsiveFontSizes","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8fc1ca25.chunk.js","sourcesContent":["import React, { forwardRef, MutableRefObject } from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nexport const tableIcons = {\n  Add: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <AddBox {...props} ref={ref} />\n  ),\n  Check: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <Check {...props} ref={ref} />\n  ),\n  Clear: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <Clear {...props} ref={ref} />\n  ),\n  Delete: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <DeleteOutline {...props} ref={ref} />\n  ),\n  DetailPanel: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <ChevronRight {...props} ref={ref} />\n  ),\n  Edit: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <Edit {...props} ref={ref} />\n  ),\n  Export: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <SaveAlt {...props} ref={ref} />\n  ),\n  Filter: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <FilterList {...props} ref={ref} />\n  ),\n  FirstPage: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <FirstPage {...props} ref={ref} />\n  ),\n  LastPage: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <LastPage {...props} ref={ref} />\n  ),\n  NextPage: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <ChevronRight {...props} ref={ref} />\n  ),\n  PreviousPage: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <ChevronLeft {...props} ref={ref} />\n  ),\n  ResetSearch: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <Clear {...props} ref={ref} />\n  ),\n  Search: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <Search {...props} ref={ref} />\n  ),\n  SortArrow: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <ArrowDownward {...props} ref={ref} />\n  ),\n  ThirdStateCheck: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <Remove {...props} ref={ref} />\n  ),\n  ViewColumn: forwardRef(\n    (\n      props,\n      ref:\n        | ((instance: SVGSVGElement | null) => void)\n        | MutableRefObject<SVGSVGElement | null>\n        | null\n    ) => <ViewColumn {...props} ref={ref} />\n  )\n};\n","import React from 'react';\nimport { tableIcons } from '../../../utils/tableIcons';\n\nimport MaterialTable from 'material-table';\nimport { Chip } from '@material-ui/core';\n\nexport interface TableRowData {\n  methods: string[];\n  route: string;\n  tableData: { id: number };\n}\n\nexport const columns = [\n  {\n    field: 'route',\n    title: 'Route'\n  },\n  {\n    field: 'methods',\n    title: 'Methods',\n    render: (rowData: TableRowData) =>\n      rowData.methods.map((m, i) =>\n        i % 2 ? (\n          <Chip\n            key={rowData.route + m}\n            color=\"secondary\"\n            label={m}\n            size=\"small\"\n            style={{ marginLeft: '1%' }}\n          />\n        ) : (\n          <Chip\n            key={rowData.route + m}\n            color=\"primary\"\n            label={m}\n            size=\"small\"\n            style={{ marginLeft: '1%' }}\n          />\n        )\n      )\n  }\n];\n\nconst SearchTable = (props: any) => {\n  return (\n    <MaterialTable\n      icons={tableIcons}\n      style={{ marginTop: '2vh' }}\n      options={{\n        headerStyle: {\n          fontSize: 18,\n          fontWeight: 'normal'\n        }\n      }}\n      {...props}\n    />\n  );\n};\n\nexport default SearchTable;\n","enum TimeInstance {\n\tMicrosecond = 1000,\n\tMillisecond = 1000000,\n\tSecond = 1000000000,\n\tMinute = 60000000000,\n\tHour = 60 * 60000000000,\n\tDay = 24 * 60 * 60000000000,\n};\n\nexport const formatTime = (data: string) => {\n  const times = data.split('|');\n  const l = times.length;\n  return `${times[l-3]}:${times[l-2]}:${times[l-1]}`;\n};\n\nexport default TimeInstance;","export const HOST_IP = 'http://localhost:9090';\n\nexport interface service_states {\n  ping: string;\n  floodping: string;\n  jitter: string;\n  monitoring: string;\n}\n\n// System Value details\nexport interface SystemValue {\n  range: rangeValues;\n  queryTime: number;\n  values: dataValues[];\n}\n\ninterface rangeValues {\n  start: any;\n  end: any;\n}\n\ninterface dataValues {\n  Value: dataValue;\n  timestamp: string;\n  normalizedTimes: string;\n}\n\ninterface dataValue {\n  cpuTotalUsage: any;\n  memory: memoryDetails;\n  disk: diskDetails;\n}\n\ninterface memoryDetails {\n  totalBytes: string;\n  availableBytes: string;\n  usedBytes: string;\n  usedPercent: any;\n  freeBytes: any;\n}\n\ninterface diskDetails {\n  diskIO: string;\n  cached: string;\n}\n\nexport interface service_states {\n  ping: string;\n  floodping: string;\n  jitter: string;\n  monitoring: string;\n}\n\n// System Value details\nexport interface SystemValue {\n  range: rangeValues;\n  queryTime: number;\n  values: dataValues[];\n}\n\ninterface rangeValues {\n  start: any;\n  end: any;\n}\n\ninterface dataValues {\n  Value: dataValue;\n  timestamp: string;\n  normalizedTimes: string;\n}\n\ninterface dataValue {\n  cpuTotalUsage: any;\n  memory: memoryDetails;\n  disk: diskDetails;\n}\n\ninterface memoryDetails {\n  totalBytes: string;\n  availableBytes: string;\n  usedBytes: string;\n  usedPercent: any;\n  freeBytes: any;\n}\n\ninterface diskDetails {\n  diskIO: string;\n  cached: string;\n}\n\nexport interface routeEntryType {\n    route: string,\n    options: routeOptionsInterface[] | undefined\n}\n\nexport interface routeOptionsInterface {\n  params: { Name: string; Value: string }[],\n  headers: { OfType: string; Value: string }[],\n  method: string,\n  body: { Name: string; Value: string }[],\n}\n\nexport interface rootRouteObject {\n  URL: string,\n  Body: { Name: string; Value: string }[],\n  Params: { Name: string; Value: string }[],\n  Header: { OfType: string; Value: string }[],\n  Method: string,\n}\n\nexport interface paramsTransformValue {\n  key: string;\n  value: string\n}\n\nexport interface paramsObject {\n  Name: string;\n  Value: string;\n}\n\nexport interface bodyObject {\n  Name: string;\n  Value: string;\n}\n\nexport interface headersObject {\n  OfType: string;\n  Value: string\n}\n","import React, { useState } from 'react';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport { HOST_IP } from '../../../utils/types';\n\nconst IntervalDetails = (props: any) => {\n  const [inputValue, setInputValue] = useState<string>(\n    props.durationValue || ''\n  );\n\n  const handleIntervalOnChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = async (e, intervalName: string) => {\n    await fetch(`${HOST_IP}/config/update-interval`, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        intervalName,\n        value: inputValue\n      })\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(response => {\n        if (response.status === '200') {\n          props.toggleComponentView(intervalName);\n          props.reFetch();\n        }\n      });\n  };\n  return (\n    <>\n      {props.toggleResults[props.intervalName] ? (\n        <div>\n          <form\n            onSubmit={e => handleSubmit(e, props.intervalName)}\n            style={{ display: 'flex' }}\n          >\n            <TextField\n              id=\"outlined-basic\"\n              label={props.durationValue}\n              variant=\"outlined\"\n              onChange={e => handleIntervalOnChange(e)}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginLeft: '4px' }}\n              type=\"submit\"\n            >\n              Go\n            </Button>\n          </form>\n        </div>\n      ) : (\n        <div style={{ textAlign: 'center' }}>\n          <Typography variant=\"h2\" align=\"center\">\n            {props.durationValue}\n          </Typography>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default IntervalDetails;\n","import { useState, useEffect } from 'react';\n\nexport type APIResponse<T> = { status: string; data?: T };\n\nexport interface FetchState<T> {\n  response: APIResponse<T>;\n  error?: Error;\n  isLoading: boolean;\n}\n\nexport const useFetch = <T extends {}>(url: string, options?: RequestInit): FetchState<T> => {\n  const [response, setResponse] = useState<APIResponse<T>>({ status: 'start fetching' });\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [requestSent, setRequestSent] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        setRequestSent(true);\n        const res = await fetch(url, { cache: 'no-cache', credentials: 'same-origin', ...options });\n        if (!res.ok) {\n          setIsLoading(false);\n          setRequestSent(false);\n          throw new Error(res.statusText);\n        }\n        const json = (await res.json()) as APIResponse<T>;\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    if (!requestSent) {\n      setTimeout(() => {\n        fetchData();\n      }, 1000);\n    }\n  }, [url, options, requestSent]);\n  return { response, error, isLoading };\n};\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface CPUUsageProps {\n  cpuMetrics: chartData[];\n}\n\nconst CPUUsage: FC<CPUUsageProps> = ({ cpuMetrics }) => {\n  const dataFormatted = cpuMetrics;\n  const series = [\n    {\n      name: 'CPU',\n      data: dataFormatted\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      xaxis: {\n        type: 'category',\n        categories: [],\n        labels: {\n          show: true,\n          rotate: 45,\n          rotateAlways: true,\n          hideOverlappingLabels: true,\n          trim: true\n        }\n      },\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'CPU usage (in percent)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.6,\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <>\n      <Chart series={series} options={options} height=\"300\" type=\"area\" />\n    </>\n  );\n};\n\nexport default React.memo(CPUUsage);\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface MemoryUsagePercentProps {\n  memoryUsagePercentMetrics: chartData[];\n}\n\nconst MemoryUsagePercent: FC<MemoryUsagePercentProps> = ({\n  memoryUsagePercentMetrics\n}) => {\n  const dataFormatted = memoryUsagePercentMetrics;\n  const series = [\n    {\n      name: 'Memory',\n      data: dataFormatted\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Memory (RAM) usage  (in percent)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.6,\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <>\n      <Chart series={series} options={options} height=\"300\" type=\"area\" />\n    </>\n  );\n};\n\nexport default React.memo(MemoryUsagePercent);\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface DiskUsageProps {\n  diskIO: chartData[];\n  cache: chartData[];\n}\n\nconst DiskUsage: FC<DiskUsageProps> = ({ diskIO, cache }) => {\n  const seriesDiskIO = [\n    {\n      name: 'Disk IO in bytes (+ve means write / -ve means read)',\n      data: diskIO\n    }\n  ];\n  const seriesCache = [\n    {\n      name: 'Cache (in bytes)',\n      data: cache\n    }\n  ];\n\n  const optionsDiskIO = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Disk IO in bytes (+ve means write / -ve means read)',\n      align: 'center'\n    }\n  };\n  const optionsCache = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Cache (in bytes)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.6,\n        inverseColors: true,\n        opacityFrom: 1,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n        <Chart\n          series={seriesDiskIO}\n          options={optionsDiskIO}\n          height=\"300\"\n          type=\"area\"\n        />\n      </div>\n      <div className=\"col-md-6\">\n        <Chart\n          series={seriesCache}\n          options={optionsCache}\n          height=\"300\"\n          type=\"area\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(DiskUsage);\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface MemoryDetailsProps {\n  availableBytes: chartData[];\n  freeBytes: chartData[];\n  totalBytes: chartData[];\n  usedBytes: chartData[];\n}\n\nconst MemoryDetails: FC<MemoryDetailsProps> = ({\n  availableBytes,\n  freeBytes,\n  totalBytes,\n  usedBytes\n}) => {\n  const series = [\n    {\n      name: 'Available',\n      data: availableBytes\n    },\n    {\n      name: 'Free',\n      data: freeBytes\n    },\n    {\n      name: 'Total',\n      data: totalBytes\n    },\n    {\n      name: 'Used',\n      data: usedBytes\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Memory (RAM) details (in kilo-bytes)',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.1,\n        inverseColors: true,\n        opacityFrom: 0.8,\n        opacityTo: 0.2\n      }\n    }\n  };\n\n  return (\n    <>\n      <Chart series={series} options={options} height=\"500\" type=\"area\" />\n    </>\n  );\n};\n\nexport default React.memo(MemoryDetails);\n","import React, { FC, useEffect, useState } from 'react';\nimport CPUUsage from './CPUUsage';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport MemoryUsagePercent from './MemoryUsage';\nimport DiskUsage from './Disk';\nimport MemoryDetails from './MemoryDetails';\nimport TimeInstance, { formatTime } from '../../utils/brt';\nimport { HOST_IP } from '../../utils/types';\nimport { APIResponse, init } from '../../utils/service';\nimport { QueryResponse, QueryValues, chartData } from '../../utils/queryTypes';\n\nexport function TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nexport function a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nconst segregateMetrics = (metricValues: QueryValues[]) => {\n  const cpuUsageSlice: chartData[] = [];\n\n  const diskSliceCache: chartData[] = [];\n  const diskSliceDiskIO: chartData[] = [];\n\n  const memorySliceAvailableBytes: chartData[] = [];\n  const memorySliceFreeBytes: chartData[] = [];\n  const memorySliceTotalBytes: chartData[] = [];\n  const memorySliceUsedBytes: chartData[] = [];\n\n  const memoryUsedPercentSlice: chartData[] = [];\n\n  for (const metric of metricValues) {\n    cpuUsageSlice.push({\n      y: metric.value.cpuTotalUsage,\n      x: formatTime(metric.timestamp)\n    });\n\n    diskSliceCache.push({\n      y: metric.value.disk.cached,\n      x: formatTime(metric.timestamp)\n    });\n    diskSliceDiskIO.push({\n      y: metric.value.disk.diskIO,\n      x: formatTime(metric.timestamp)\n    });\n\n    memorySliceAvailableBytes.push({\n      y: metric.value.memory.availableBytes,\n      x: formatTime(metric.timestamp)\n    });\n    memorySliceFreeBytes.push({\n      y: metric.value.memory.freeBytes,\n      x: formatTime(metric.timestamp)\n    });\n    memorySliceTotalBytes.push({\n      y: metric.value.memory.totalBytes,\n      x: formatTime(metric.timestamp)\n    });\n    memorySliceUsedBytes.push({\n      y: metric.value.memory.usedBytes,\n      x: formatTime(metric.timestamp)\n    });\n\n    memoryUsedPercentSlice.push({\n      y: metric.value.memory.usedPercent,\n      x: formatTime(metric.timestamp)\n    });\n  }\n  return {\n    cpuUsageSlice,\n    diskSliceCache,\n    diskSliceDiskIO,\n    memorySliceAvailableBytes,\n    memorySliceFreeBytes,\n    memorySliceTotalBytes,\n    memorySliceUsedBytes,\n    memoryUsedPercentSlice\n  };\n};\n\ninterface SystemMetricsProps {\n  showLoader(status: boolean): any;\n}\n\nconst SystemMetrics: FC<SystemMetricsProps> = ({ showLoader }) => {\n  const classes = useStyles();\n  const [response, setResponse] = useState(init());\n  const [error, setError] = useState('');\n  const [value, setValue] = React.useState(0);\n  const endTimestamp = new Date().getTime() * 1000000 - TimeInstance.Hour;\n\n  useEffect(() => {\n    showLoader(true);\n  }, [showLoader]);\n  useEffect(() => {\n    fetch(\n      `${HOST_IP}/query?timeSeriesPath=storage/system&endTimestamp=${endTimestamp}`\n    )\n      .then(res => res.json())\n      .then(\n        (response: APIResponse<QueryResponse>) => {\n          setResponse(response);\n        },\n        (err: string) => {\n          setError(err);\n        }\n      );\n    // eslint-disable-next-line\n  }, []);\n  const handleChange = (_event, newValue) => {\n    setValue(newValue);\n  };\n\n  if (error) {\n    showLoader(false);\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data.values) {\n    return (\n      <>\n        <Alert severity=\"info\">Fetching data from sources</Alert>\n      </>\n    );\n  }\n\n  const responseInFormat = segregateMetrics(response.data.values);\n  showLoader(false);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\" style={{ marginBottom: '1%' }}>\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"secondary\"\n            >\n              <Tab label=\"System\" {...a11yProps(0)} />\n              <Tab label=\"Disk\" {...a11yProps(1)} />\n              <Tab label=\"Memory details\" {...a11yProps(2)} />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={value} index={0}>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <CPUUsage cpuMetrics={responseInFormat.cpuUsageSlice} />\n              </div>\n              <div className=\"col-md-6\">\n                <MemoryUsagePercent\n                  memoryUsagePercentMetrics={\n                    responseInFormat.memoryUsedPercentSlice\n                  }\n                />\n              </div>\n            </div>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <div className=\"col-md-12\">\n              <DiskUsage\n                diskIO={responseInFormat.diskSliceDiskIO}\n                cache={responseInFormat.diskSliceCache}\n              />\n            </div>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <div className=\"col-md-12\">\n              <MemoryDetails\n                availableBytes={responseInFormat.memorySliceAvailableBytes}\n                freeBytes={responseInFormat.memorySliceFreeBytes}\n                totalBytes={responseInFormat.memorySliceTotalBytes}\n                usedBytes={responseInFormat.memorySliceUsedBytes}\n              />\n            </div>\n          </TabPanel>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemMetrics;\n","import { useFetch } from './useFetch';\nimport { HOST_IP } from './types';\n\nexport interface APIResponse<T> {\n  status: string;\n  data: T;\n}\n\nexport const init = (): {status: string, data: any} => {\n  return {\n    status: '',\n    data: {}\n  }\n}\n\nconst GetSystemData = () => {\n\n  const { response, error } = useFetch(\n    `${HOST_IP}/query?timeSeriesPath=storage/system`\n  );\n\n  if (response) return response\n  else return error\n\n};\n\nconst GetServiceState = () => {\n\n  const { response, error } = useFetch(\n    `${HOST_IP}/service-state`\n  );\n\n  if (response) return response\n  else return error\n\n};\n\n\n\nexport { GetSystemData, GetServiceState }","import React, { FC, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { Badge } from 'reactstrap';\n\ninterface TypeProps {\n  slice: string[];\n  getRequestType(type: string);\n}\n\nconst Type: FC<TypeProps> = ({ slice, getRequestType }) => {\n  const [showDone, setShowDone] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState('');\n  const sendType = (type: string): void => {\n    setShowDone(true);\n    setSelectedRequest(type);\n    getRequestType(type);\n  };\n  return (\n    <div>\n      <ButtonGroup\n        color=\"primary\"\n        variant=\"contained\"\n        aria-label=\"outlined primary button group\"\n      >\n        {slice.map((type: string, index: number) => {\n          return (\n            <Button key={index} onClick={() => sendType(type.toUpperCase())}>\n              {type.toUpperCase()}\n            </Button>\n          );\n        })}\n      </ButtonGroup>\n      {showDone ? (\n        <>\n          <DoneIcon\n            style={{ marginLeft: '3%' }}\n            fontSize=\"large\"\n            color=\"secondary\"\n          />{' '}\n          <Badge color=\"success\" style={{ fontSize: '13px', marginLeft: '1%' }}>\n            {selectedRequest}\n          </Badge>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Type;\n","import React, { FC, useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\ninterface GridBodyProps {\n  name: string;\n  headers?: { key: string; value: string }[];\n  updateParent: React.Dispatch<React.SetStateAction<pair[] | undefined>>;\n}\n\nexport interface pair {\n  key: string;\n  value: string;\n}\n\nconst GridBody: FC<GridBodyProps> = ({ name, headers, updateParent }) => {\n  const [header, setHeader] = useState<pair[]>([{ key: '', value: '' }]);\n  const [bodyValue, setBodyValue] = useState<string>('');\n  const updateItems = (key: string, value: string, i: number) => {\n    if (key === '') {\n      header[i].value = value;\n    }\n    if (value === '') {\n      header[i].key = key;\n    }\n    if (i === header.length - 1) {\n      header.push({ key: '', value: '' });\n    }\n    setBodyValue(JSON.stringify(header, null, 4));\n    updateParent(header);\n  };\n  const updateBody = (content: string) => {\n    setBodyValue(content);\n    const inJSON = JSON.parse(content) as pair[];\n    header.length = 0;\n    for (const pair of inJSON) {\n      header.push({\n        key: pair.key,\n        value: pair.value\n      });\n    }\n    setHeader(header);\n    updateParent(header);\n  };\n  useEffect(() => {\n    let parameters: { key: string; value: string }[] | undefined = headers;\n    (parameters || []).push({\n      key: '',\n      value: ''\n    });\n    if (parameters === undefined) {\n      parameters = [\n        {\n          key: '',\n          value: ''\n        }\n      ];\n    }\n    setHeader(parameters);\n    setBodyValue(JSON.stringify(parameters, null, 2));\n  }, [headers]);\n  return (\n    <div>\n      <h6 style={{ fontWeight: 'bold' }}>{name}</h6>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-md-8\" style={{ display: 'inline-grid' }}>\n          {header.map((head, index) => (\n            <div className=\"row\" style={{ margin: '3px' }} key={index}>\n              <div className=\"col-md-6\">\n                <TextField\n                  id=\"outlined-basic\"\n                  size=\"small\"\n                  label=\"Key\"\n                  value={head.key}\n                  style={{ width: '100%' }}\n                  variant=\"outlined\"\n                  onChange={e => updateItems(e.target.value, '', index)}\n                />\n              </div>\n              <div className=\"col-md-6\">\n                <TextField\n                  id=\"outlined-basic\"\n                  size=\"small\"\n                  value={head.value}\n                  style={{ width: '100%' }}\n                  label=\"value\"\n                  variant=\"outlined\"\n                  onChange={e => updateItems('', e.target.value, index)}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"JSONified\"\n            multiline\n            rows={header.length * 3}\n            value={bodyValue}\n            variant=\"outlined\"\n            onChange={e => updateBody(e.target.value)}\n            style={{\n              minHeight: '100%',\n              width: '100%',\n              backgroundColor: '#f9f9f9'\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GridBody;\n","import { rootRouteObject, headersObject, paramsObject, bodyObject, paramsTransformValue } from './types';\n\nexport const getRoutesMap = (data: rootRouteObject[]) => {\n  let configRoutes = new Map();\n    data.forEach((route: rootRouteObject) => {\n      const uri = route.URL;\n      if (!configRoutes.has(uri)) {\n        configRoutes.set(uri, [\n          {\n            method: route.Method,\n            body: route.Body,\n            headers: route.Header,\n            params: route.Params\n          }\n        ]);\n      } else {\n        configRoutes.set(uri, [\n          ...configRoutes.get(uri),\n          {\n            method: route.Method,\n            body: route.Body,\n            headers: route.Header,\n            params: route.Params\n          }\n        ]);\n      }\n    });\n  return configRoutes;\n}\n\n\nexport const populateParams = (params: paramsObject[] | bodyObject[] | headersObject[]) => {\n  let arr: paramsTransformValue[] = [];\n  if (params !== null && params !== undefined) {\n    params.forEach(param => {\n      arr.push({\n        key: param.Name || param.OfType,\n        value: param.Value\n      });\n    });\n  }\n  return arr;\n}\n","import React, { useState, ChangeEvent, useEffect } from 'react';\nimport Type from './Groups';\nimport GridBody, { pair } from './GridBody';\nimport { Card, CardContent } from '@material-ui/core';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport { HOST_IP, paramsTransformValue } from '../../utils/types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport PropTypes from 'prop-types';\nimport { populateParams } from '../../utils/parse';\n\ninterface InputScreenProps {\n  screenType: string | undefined;\n  params: { Name: string; Value: string }[];\n  headers: { OfType: string; Value: string }[];\n  route: string;\n  body: { Name: string; Value: string }[];\n  method: string;\n  updateCurrentModal: (routes: any, URL: string) => void;\n}\n\ninterface AlertSnackBar {\n  severity: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n}\n\nconst requestsTypeSupported = ['get', 'post', 'put', 'delete', 'patch'];\n\nconst hyperTexts = ['https', 'http', 'manual'];\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst Input = (props: InputScreenProps) => {\n  const {\n    screenType,\n    headers,\n    params,\n    route,\n    body,\n    method,\n    updateCurrentModal\n  } = props;\n  const [requestType, setRequestType] = useState('');\n  const [, setHyperTextType] = useState('');\n  const [valueURLRoute, setValueURLRoute] = useState('');\n\n  const [applyHeader, setApplyHeader] = useState<boolean>(false);\n  const [headerValues, setHeaderValues] = useState<pair[]>();\n\n  const [applyParams, setApplyParams] = useState<boolean>(false);\n  const [paramsValues, setParamsValues] = useState<pair[]>();\n\n  const [applyBody, setApplyBody] = useState<boolean>(false);\n  const [bodyValues, setBodyValues] = useState<pair[]>();\n\n  const [testInputResponse, setTestInputResponse] = useState<string>('');\n\n  const [openSnackBar, setOpenSnackBar] = useState<AlertSnackBar>({\n    severity: 'info',\n    message: ''\n  });\n  const [showSnackBar, setShowSnackBar] = useState<boolean>(false);\n  const [open, setOpen] = useState(false);\n  const [showResponseButton, setShowResponseButton] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (screenType === 'config-screen') {\n      let paramValues: paramsTransformValue[] = populateParams(params);\n      let bodyValues: paramsTransformValue[] = populateParams(body);\n      let headerValues: paramsTransformValue[] = populateParams(headers);\n      setParamsValues(paramValues);\n      setBodyValues(bodyValues);\n      setHeaderValues(headerValues);\n      setRequestType(method);\n      setValueURLRoute(route);\n    }\n  }, [body, headers, method, params, route, screenType]);\n\n  const getRequestType = (type: string) => {\n    setRequestType(type);\n  };\n  const getHyperTextType = (type: string) => {\n    setHyperTextType(type);\n    type = type.toLowerCase();\n    if (type !== 'manual') {\n      setValueURLRoute(`${type}://`);\n    } else {\n      setValueURLRoute('');\n    }\n  };\n  const updateURLRouteValue = (\n    e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setValueURLRoute(e.target.value);\n  };\n  const handleCancel = () => {\n    setShowResponseButton(false);\n    setRequestType('');\n    setHyperTextType('');\n    setValueURLRoute('');\n    setHeaderValues([]);\n    setParamsValues([]);\n    setBodyValues([]);\n    setApplyHeader(false);\n    setApplyParams(false);\n    setApplyBody(false);\n  };\n  const testAndEdit = () => {\n    const params = {};\n    const headers = {};\n    const body = {};\n    const { route } = props;\n    setShowResponseButton(false);\n    if (headerValues !== undefined) {\n      for (const h of headerValues) {\n        if (!(h.key === '' && h.value === '')) {\n          headers[h.key] = h.value;\n        }\n      }\n    } else {\n      setHeaderValues([]);\n    }\n\n    if (paramsValues !== undefined) {\n      for (const p of paramsValues) {\n        if (!(p.key === '' && p.value === '')) {\n          params[p.key] = p.value;\n        }\n      }\n    } else {\n      setParamsValues([]);\n    }\n\n    if (bodyValues !== undefined) {\n      for (const b of bodyValues) {\n        if (!(b.key === '' && b.value === '')) {\n          body[b.key] = b.value;\n        }\n      }\n    } else {\n      setBodyValues(bodyValues);\n    }\n    fetch(`${HOST_IP}/quick-input`, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        method: requestType,\n        url: valueURLRoute,\n        params: params,\n        headers: headers,\n        body: body\n      })\n    })\n      .then(resp => resp.json())\n      .then(response => {\n        try {\n          const inJSON = JSON.stringify(JSON.parse(response['data']), null, 4);\n          setTestInputResponse(inJSON);\n          setShowResponseButton(true);\n        } catch (e) {\n          setTestInputResponse(response['data']);\n        }\n        fetch(`${HOST_IP}/update-route`, {\n          method: 'post',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            method: requestType,\n            url: valueURLRoute,\n            params: params,\n            headers: headers,\n            body: body,\n            orgRoute: route\n          })\n        })\n          .then(resp => resp.json())\n          .then(response => {\n            updateCurrentModal(response, valueURLRoute);\n            setShowResponseButton(true);\n          });\n      });\n  };\n  const testURL = () => {\n    const params = {};\n    const headers = {};\n    const body = {};\n    setShowResponseButton(false);\n    if (headerValues !== undefined) {\n      for (const h of headerValues) {\n        headers[h.key] = h.value;\n      }\n    } else {\n      setHeaderValues([]);\n    }\n\n    if (paramsValues !== undefined) {\n      for (const p of paramsValues) {\n        params[p.key] = p.value;\n      }\n    } else {\n      setParamsValues([]);\n    }\n\n    if (bodyValues !== undefined) {\n      for (const b of bodyValues) {\n        body[b.key] = b.value;\n      }\n    } else {\n      setBodyValues(bodyValues);\n    }\n\n    fetch(`${HOST_IP}/quick-input`, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        method: requestType,\n        url: valueURLRoute,\n        params: params,\n        headers: headers,\n        body: body\n      })\n    })\n      .then(response => response.json())\n      .then(\n        response => {\n          try {\n            const inJSON = JSON.stringify(\n              JSON.parse(response['data']),\n              null,\n              4\n            );\n            setTestInputResponse(inJSON);\n          } catch (e) {\n            setTestInputResponse(response['data']);\n          }\n          fetch(`${HOST_IP}/add-route`, {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              method: requestType,\n              url: valueURLRoute,\n              params: params,\n              headers: headers,\n              body: body\n            })\n          })\n            .then(response => response.json())\n            .then(\n              () => {\n                setOpenSnackBar({\n                  severity: 'success',\n                  message: 'success'\n                });\n                setShowSnackBar(true);\n              },\n              err => {\n                console.error(err);\n                setOpenSnackBar({\n                  severity: 'error',\n                  message:\n                    'error occurred: please contact the dev team or open a issue at https://github.com/zairza-cetb/bench-routes'\n                });\n                setShowSnackBar(true);\n              }\n            );\n          setShowResponseButton(true);\n        },\n        err => {\n          console.error(err);\n          setOpenSnackBar({\n            severity: 'error',\n            message:\n              'error occurred: please contact the dev team or open a issue at https://github.com/zairza-cetb/bench-routes'\n          });\n          setShowSnackBar(true);\n        }\n      );\n  };\n  return (\n    <Card>\n      <CardContent>\n        <h3 style={{ marginBottom: '2%' }}>Quick Input</h3>\n        <h6 style={{ color: 'cadetblue' }}>\n          <InfoOutlinedIcon /> Input routes into bench-routes for monitoring\n        </h6>\n        <hr />\n        <div style={{ margin: '2% 0% 2% 0%' }}>\n          <h6>HTTP methods</h6>\n          <Type slice={requestsTypeSupported} getRequestType={getRequestType} />\n        </div>\n        <div style={{ margin: '2% 0% 2% 0%' }}>\n          <h6>URL</h6>\n          <Type slice={hyperTexts} getRequestType={getHyperTextType} />\n          <TextField\n            id=\"outlined-basic\"\n            style={{ margin: '3vh 0vh 0vh 1vh', width: '100%' }}\n            value={valueURLRoute}\n            onChange={updateURLRouteValue}\n            size=\"medium\"\n            label=\"URL route\"\n            variant=\"outlined\"\n          />\n        </div>\n        <div\n          style={{\n            border: '1px solid #c4c4c4',\n            borderRadius: '1vh',\n            padding: '2vh'\n          }}\n        >\n          <h6>Apply</h6>\n          <hr />\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                checked={applyHeader || (headerValues || []).length > 0}\n                onClick={() => setApplyHeader(!applyHeader)}\n              />\n            }\n            label=\"Header\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                checked={applyParams || (paramsValues || []).length > 0}\n                onClick={() => setApplyParams(!applyParams)}\n              />\n            }\n            label=\"Params\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                checked={applyBody || (bodyValues || []).length > 0}\n                onClick={() => setApplyBody(!applyBody)}\n              />\n            }\n            label=\"Body\"\n          />\n        </div>\n        <div style={{ margin: '2%' }}>\n          {applyHeader || (headerValues || []).length > 0 ? (\n            <GridBody\n              name=\"Header\"\n              headers={headerValues}\n              updateParent={setHeaderValues}\n            />\n          ) : null}\n          {applyParams || (paramsValues || []).length > 0 ? (\n            <GridBody\n              name=\"Params\"\n              headers={paramsValues}\n              updateParent={setParamsValues}\n            />\n          ) : null}\n          {applyBody || (bodyValues || []).length > 0 ? (\n            <GridBody\n              name=\"Body\"\n              headers={bodyValues}\n              updateParent={setBodyValues}\n            />\n          ) : null}\n        </div>\n        <div>\n          {screenType === 'config-screen' ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => testAndEdit()}\n            >\n              Test & Save\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => testURL()}\n            >\n              Test & Save\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            style={{ marginLeft: '1%' }}\n            onClick={() => handleCancel()}\n          >\n            Cancel\n          </Button>\n          {showResponseButton ? (\n            <Button\n              variant=\"contained\"\n              color=\"default\"\n              style={{ marginLeft: '1%' }}\n              onClick={() => setOpen(true)}\n            >\n              Show Response\n            </Button>\n          ) : null}\n        </div>\n        <Dialog aria-labelledby=\"customized-dialog-title\" open={open}>\n          <DialogTitle id=\"customized-dialog-title\">Response</DialogTitle>\n          <DialogContent dividers>\n            <Card>\n              <CardContent>\n                <pre style={{ fontWeight: 'bold' }}>{testInputResponse}</pre>\n              </CardContent>\n            </Card>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setOpen(false)} color=\"secondary\">\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Snackbar\n          open={showSnackBar}\n          autoHideDuration={6000}\n          onClose={() => setShowSnackBar(false)}\n        >\n          <Alert severity={openSnackBar.severity}>{openSnackBar.message}</Alert>\n        </Snackbar>\n      </CardContent>\n    </Card>\n  );\n};\n\nInput.propTypes = {\n  screenType: PropTypes.string,\n  params: PropTypes.array\n};\n\nexport default Input;\n","import React, { Suspense, useState, useEffect } from 'react';\nimport {\n  AppBar,\n  Button,\n  Chip,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Tab,\n  Tabs\n} from '@material-ui/core';\nimport { TabPanel } from '../../Dashboard/SystemMetrics';\nimport Input from '../../Input/Input';\nimport { routeEntryType } from '../../../utils/types';\n\ninterface EditModalProps {\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  selectedRoute: routeEntryType;\n  updateConfigRoutes: (route: any) => void;\n}\n\nconst EditModal = (props: EditModalProps) => {\n  const { isOpen, setOpen, selectedRoute, updateConfigRoutes } = props;\n  const [modalUrl, setModalUrl] = useState<string>('');\n  const [value, setValue] = useState<number>(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const tabProps = (index: number) => {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`\n    };\n  };\n\n  useEffect(() => {\n    setValue(0);\n    setModalUrl(selectedRoute.route);\n  }, [selectedRoute]);\n\n  const updateCurrentModal = (routes, URL: string) => {\n    setModalUrl(URL);\n    updateConfigRoutes(routes);\n  };\n\n  return (\n    <div>\n      <Suspense fallback={<CircularProgress disableShrink />}>\n        <Dialog\n          fullWidth\n          maxWidth=\"md\"\n          open={isOpen}\n          onClose={handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">\n            {selectedRoute ? (\n              <div>\n                {\n                  <Chip\n                    variant=\"outlined\"\n                    size=\"medium\"\n                    style={{ fontSize: '14px' }}\n                    label={modalUrl}\n                    clickable\n                    color=\"primary\"\n                  />\n                }\n              </div>\n            ) : (\n              <> </>\n            )}\n          </DialogTitle>\n          <DialogContent>\n            <AppBar position=\"static\">\n              <Tabs\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Edit Route\"\n              >\n                {Object.keys(selectedRoute).length !== 0 ? (\n                  selectedRoute?.options?.map((options, index) => {\n                    return (\n                      <Tab\n                        key={index}\n                        label={options.method}\n                        {...tabProps(index)}\n                      />\n                    );\n                  })\n                ) : (\n                  <> </>\n                )}\n              </Tabs>\n            </AppBar>\n            {Object.keys(selectedRoute).length !== 0 ? (\n              selectedRoute?.options?.map((options, index) => {\n                return (\n                  <TabPanel key={index} value={value} index={index}>\n                    <Input\n                      method={options.method}\n                      headers={options.headers}\n                      body={options.body}\n                      params={options.params}\n                      route={selectedRoute.route}\n                      updateCurrentModal={(routes, URL) =>\n                        updateCurrentModal(routes, URL)\n                      }\n                      screenType=\"config-screen\"\n                    />\n                  </TabPanel>\n                );\n              })\n            ) : (\n              <> </>\n            )}\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default EditModal;\n","import {\n  HOST_IP,\n  rootRouteObject\n} from '../utils/types';\n\ninterface interval {\n  Test: string;\n  Duration: string;\n  Type: string;\n}\n\nexport const fetchConfigIntervals = async (setConfigIntervals) => {\n  try {\n    const response = await fetch(`${HOST_IP}/get-config-intervals`).then(\n      resp => {\n        return resp.json();\n      }\n    );\n    const { data } = response;\n    let intervals: any = [];\n    data.forEach((interval: interval) => {\n      intervals.push({\n        test: interval.Test,\n        duration: interval.Duration,\n        unit: interval.Type\n      });\n    });\n    setConfigIntervals(intervals);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const fetchConfigRoutes = async (setConfigRoutes) => {\n  const response = await fetch(`${HOST_IP}/get-config-routes`).then(resp => {\n    return resp.json();\n  });\n  const { data } = response;\n  let configRoutes = new Map();\n  data.forEach((route: rootRouteObject) => {\n    const uri = route.URL\n    if (!configRoutes.has(uri)) {\n      configRoutes.set(uri, [{\n          method: route.Method,\n          body: route.Body,\n          headers: route.Header,\n          params: route.Params\n        }]);\n    } else {\n      configRoutes.set(uri, [\n        ...configRoutes.get(uri), {\n          method: route.Method,\n          body: route.Body,\n          headers: route.Header,\n          params: route.Params\n        }]);\n    }\n  });\n  setConfigRoutes(configRoutes);\n};\n","import { HOST_IP, routeOptionsInterface } from '../../utils/types';\nimport { getRoutesMap } from '../../utils/parse';\n\nexport interface TableRouteType {\n  route: string;\n  methods: string[];\n}\n\nexport interface IntervalType {\n  test: string;\n  duration: number;\n  unit: string;\n}\n\nexport const onRowDelete = (oldData: TableRouteType, setConfigRoutes) => {\n  fetch(`${HOST_IP}/delete-route`, {\n    method: 'post',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      actualRoute: oldData.route\n    })\n  })\n    .then(resp => resp.json())\n    .then(response => {\n      const { data } = response;\n      let configRoutes: Map<\n        string,\n        routeOptionsInterface[]\n      > = getRoutesMap(data);\n      setConfigRoutes(configRoutes);\n    }, err => {\n      console.error(err);\n    });\n};\n","import React, { FC, useState, useEffect, lazy, Suspense } from 'react';\nimport {\n  HOST_IP,\n  service_states,\n  routeEntryType,\n  routeOptionsInterface\n} from '../../utils/types';\nimport IntervalDetails from './components/IntervalDetails';\nimport {\n  Grid,\n  CardContent,\n  Typography,\n  makeStyles,\n  Tooltip,\n  CircularProgress\n} from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport { Edit as EditIcon, Close as CloseIcon } from '@material-ui/icons';\nimport { truncate } from '../../utils/stringManipulations';\nimport { useFetch } from '../../utils/useFetch';\nimport { Alert } from '@material-ui/lab';\nimport { tableIcons } from '../../utils/tableIcons';\nimport EditModal from './components/EditModal';\nimport { getRoutesMap } from '../../utils/parse';\nimport { fetchConfigIntervals, fetchConfigRoutes } from '../../services/config';\nimport { columns, TableRowData } from './components/MaterialTable';\nimport { onRowDelete, TableRouteType, IntervalType } from './handles';\n\nconst SearchTable = lazy(() => import('./components/MaterialTable'));\n\nconst useStyles = makeStyles(_theme => ({\n  root: {\n    diplay: 'flex'\n  },\n  cardStyle: {\n    minHeight: '8vh'\n  },\n  h6: {\n    fontWeight: 'normal'\n  }\n}));\n\nconst Config: FC<{}> = () => {\n  const classes = useStyles();\n  const [configIntervals, setConfigIntervals] = useState<IntervalType[] | null>(\n    null\n  );\n\n  const [configRoutes, setConfigRoutes] = useState<\n    Map<string, routeOptionsInterface[]>\n  >(new Map());\n\n  const [toggleResults, setToggleResults] = useState({\n    ping: false,\n    jitter: false,\n    'req-res-delay-and-monitoring': false\n  });\n\n  const [editModalOpen, setEditModalOpen] = useState(false);\n\n  const [selectedRow, setSelectedRow] = useState<routeEntryType>({\n    route: '',\n    options: []\n  });\n\n  const { response, error } = useFetch<service_states>(\n    `${HOST_IP}/service-state`\n  );\n\n  useEffect(() => {\n    fetchConfigIntervals(setConfigIntervals).then(() =>\n      fetchConfigRoutes(setConfigRoutes)\n    );\n  }, []);\n\n  const getTableData = (routes: [string, routeOptionsInterface[]][]) => {\n    let tableData: TableRouteType[] = [];\n    routes.forEach(route => {\n      let methods: string[] = [];\n      route[1].forEach(option => {\n        Object.keys(option).forEach(k => {\n          if (k === 'method') {\n            methods.push(option[k]);\n          }\n        });\n      });\n      tableData.push({\n        route: route[0],\n        methods\n      });\n    });\n    return tableData;\n  };\n\n  const updateConfigRoutes = routes => {\n    const { data } = routes;\n    let configRoutes: Map<string, routeOptionsInterface[]> = getRoutesMap(data);\n    setConfigRoutes(configRoutes);\n  };\n\n  const handleToggle = (intervalName: string) => {\n    switch (intervalName) {\n      case 'ping':\n        setToggleResults({ ...toggleResults, ping: !toggleResults['ping'] });\n        break;\n      case 'jitter':\n        setToggleResults({\n          ...toggleResults,\n          jitter: !toggleResults['jitter']\n        });\n        break;\n      case 'req-res-delay-and-monitoring':\n        setToggleResults({\n          ...toggleResults,\n          'req-res-delay-and-monitoring': !toggleResults[\n            'req-res-delay-and-monitoring'\n          ]\n        });\n        break;\n    }\n  };\n\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching from sources</Alert>;\n  }\n\n  return (\n    <>\n      <Paper elevation={0} style={{ marginBottom: '1%', padding: '1%' }}>\n        <CardContent>\n          <h4>Scrape Intervals</h4>\n          <hr />\n        </CardContent>\n        <Grid container spacing={1}>\n          {configIntervals?.map((interval: IntervalType) => {\n            const { test, duration, unit } = interval;\n            return (\n              <Grid item lg={3} sm={6} xl={3} xs={12} key={test}>\n                <Paper\n                  className={classes.cardStyle}\n                  elevation={0}\n                  variant=\"outlined\"\n                >\n                  <CardContent>\n                    <Grid container style={{ justifyContent: 'space-between' }}>\n                      <Grid item>\n                        <Typography\n                          gutterBottom\n                          variant=\"h6\"\n                          className={classes.h6}\n                        >\n                          {truncate(\n                            test.charAt(0).toUpperCase() + test.slice(1),\n                            14\n                          )}\n                        </Typography>\n                      </Grid>\n                      <Grid item>\n                        {toggleResults[test] ? (\n                          <Tooltip title=\"Cancel\" style={{ cursor: 'pointer' }}>\n                            <CloseIcon onClick={() => handleToggle(test)} />\n                          </Tooltip>\n                        ) : (\n                          <Tooltip title=\"Edit\" style={{ cursor: 'pointer' }}>\n                            <EditIcon onClick={() => handleToggle(test)} />\n                          </Tooltip>\n                        )}\n                      </Grid>\n                    </Grid>\n                    <IntervalDetails\n                      reFetch={fetchConfigIntervals}\n                      toggleComponentView={(name: string) => handleToggle(name)}\n                      toggleResults={toggleResults}\n                      durationValue={duration}\n                      intervalName={test}\n                    />\n                    <Typography variant=\"body1\" align=\"center\">\n                      {unit}\n                    </Typography>\n                  </CardContent>\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Paper>\n      <EditModal\n        isOpen={editModalOpen}\n        setOpen={(open: boolean) => setEditModalOpen(open)}\n        selectedRoute={selectedRow}\n        updateConfigRoutes={route => updateConfigRoutes(route)}\n      />\n      <Suspense fallback={<CircularProgress disableShrink />}>\n        <Paper elevation={0}>\n          <SearchTable\n            title=\"URL endpoints\"\n            columns={columns}\n            data={getTableData(Array.from(configRoutes))}\n            actions={[\n              {\n                icon: tableIcons.Edit,\n                tooltip: 'Edit Route',\n                onClick: (_event: any, rowData: TableRowData) => {\n                  setSelectedRow({\n                    route: rowData.route,\n                    options: configRoutes.get(rowData.route)\n                  });\n                  setEditModalOpen(!editModalOpen);\n                }\n              }\n            ]}\n            editable={{ onRowDelete }}\n          />\n        </Paper>\n      </Suspense>\n    </>\n  );\n};\n\nexport default Config;\n","const truncate = (str: string, n: number) => {\n  return (str.length > n) ? str.substr(0, n-1) + '...' : str;\n};\n\nexport { truncate };","import React, { FC, useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport Alert from '@material-ui/lab/Alert';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { APIResponse, init } from '../../utils/service';\nimport { QueryResponse, QueryValues, chartData } from '../../utils/queryTypes';\nimport { HOST_IP } from '../../utils/types';\nimport TimeInstance, { formatTime } from '../../utils/brt';\nimport { useStyles, TabPanel, a11yProps } from './SystemMetrics';\n\nconst format = (data: QueryValues[] | any) => {\n  const cerr: chartData[] = [];\n  const cwarn: chartData[] = [];\n  const cevents: chartData[] = [];\n  const ckerr: chartData[] = [];\n  const ckwarn: chartData[] = [];\n  const ckevents: chartData[] = [];\n  if (!data) {\n    return {\n      cerr,\n      cwarn,\n      cevents,\n      ckerr,\n      ckwarn,\n      ckevents\n    };\n  }\n  for (const value of data) {\n    cerr.push({\n      y: value.value.cerr,\n      x: formatTime(value.timestamp)\n    });\n    cwarn.push({\n      y: value.value.cwarn,\n      x: formatTime(value.timestamp)\n    });\n    cevents.push({\n      y: value.value.cevents,\n      x: formatTime(value.timestamp)\n    });\n    ckerr.push({\n      y: value.value.ckerr,\n      x: formatTime(value.timestamp)\n    });\n    ckwarn.push({\n      y: value.value.ckwarn,\n      x: formatTime(value.timestamp)\n    });\n    ckevents.push({\n      y: value.value.ckevents,\n      x: formatTime(value.timestamp)\n    });\n  }\n  return {\n    cerr,\n    cwarn,\n    cevents,\n    ckerr,\n    ckwarn,\n    ckevents\n  };\n};\n\nconst JournalMetrics: FC<{}> = () => {\n  const classes = useStyles();\n  const [response, setResponse] = useState(init());\n  const [error, setError] = useState('');\n  const endTimestamp = new Date().getTime() * 1000000 - TimeInstance.Hour;\n  const [value, setValue] = React.useState(0);\n  const handleChange = (_event, newValue) => {\n    setValue(newValue);\n  };\n  useEffect(() => {\n    fetch(\n      `${HOST_IP}/query?timeSeriesPath=storage/journal&endTimestamp=${endTimestamp}`\n    )\n      .then(res => res.json())\n      .then(\n        (response: APIResponse<QueryResponse>) => {\n          setResponse(response);\n        },\n        (err: string) => {\n          setError(err);\n        }\n      );\n    // eslint-disable-next-line\n  }, []);\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching data from sources</Alert>;\n  }\n  const data = format(response.data.values);\n\n  const seriesSystemd = [\n    {\n      name: 'Errors',\n      data: data.cerr\n    },\n    {\n      name: 'Warnings',\n      data: data.cwarn\n    },\n    {\n      name: 'Events',\n      data: data.cevents\n    }\n  ];\n  const seriesKernel = [\n    {\n      name: 'Errors',\n      data: data.ckerr\n    },\n    {\n      name: 'Warnings',\n      data: data.ckwarn\n    },\n    {\n      name: 'Events',\n      data: data.ckevents\n    }\n  ];\n  const optionsSystemd = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Systemd services',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.3,\n        inverseColors: true,\n        opacityFrom: 0.8,\n        opacityTo: 0.2\n      }\n    }\n  };\n  const optionsKernel = {\n    chart: {\n      type: 'area',\n      background: '#fff'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      curve: 'straight',\n      lineCap: 'butt',\n      width: 1\n    },\n    subtitle: {\n      text: 'Kernel',\n      align: 'center'\n    },\n    fill: {\n      opacity: 1,\n      type: 'gradient',\n      gradient: {\n        shade: 'dark',\n        type: 'vertical',\n        shadeIntensity: 0.3,\n        inverseColors: true,\n        opacityFrom: 0.8,\n        opacityTo: 0.2\n      }\n    }\n  };\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} indicatorColor=\"secondary\">\n          <Tab label=\"Kernel\" {...a11yProps(0)} />\n          <Tab label=\"Systemd\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Chart\n              series={seriesKernel}\n              options={optionsKernel}\n              height=\"300\"\n              type=\"area\"\n            />\n          </div>\n        </div>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Chart\n              series={seriesSystemd}\n              options={optionsSystemd}\n              height=\"300\"\n              type=\"area\"\n            />\n          </div>\n        </div>\n      </TabPanel>\n    </div>\n  );\n};\n\nexport default JournalMetrics;\n","import React, { FC } from 'react';\nimport SystemMetrics from './SystemMetrics';\nimport JournalMetrics from './JournalMetrics';\nimport { Card, CardContent } from '@material-ui/core';\n\ninterface DashboardProps {\n  updateLoader(status: boolean): void;\n}\n\nconst Dashboard: FC<DashboardProps> = ({ updateLoader }) => {\n  updateLoader(true);\n  return (\n    <Card>\n      <CardContent>\n        <h4>Dashboard</h4>\n        <hr />\n        <SystemMetrics showLoader={updateLoader} />\n        <hr />\n        <JournalMetrics />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Dashboard;\n","import React, { FC } from 'react';\n\nconst FloodPing: FC<{}> = () => {\n  return <div>FloodPing page</div>;\n};\n\nexport default FloodPing;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface JitterProps {\n  value: chartData[];\n}\n\nconst Jitter: FC<JitterProps> = ({ value }) => {\n  const series = [\n    {\n      name: 'min',\n      data: value\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default Jitter;\n","// TODO: improved URL filtering\nconst filterUrl = (url: string) => {\n    let res;\n    if (url.startsWith('https://www.')) {\n      res = url.replace('https://www.', '');\n    } else if (url.startsWith('https://')) {\n      res = url.replace('https://', '');\n    } else if (url.startsWith('http://www.')) {\n      res = url.replace('http://www.', '');\n    } else if (url.startsWith('http://')) {\n      res = url.replace('http://', '');\n    }\n    return res;\n}\n\nexport {filterUrl}","import React, { FC, useState, useEffect } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { service_states, HOST_IP } from '../../utils/types';\nimport { Card, CardContent, TextField } from '@material-ui/core';\nimport {\n  RoutesSummary,\n  QueryResponse,\n  chartData,\n  APIQueryResponse\n} from '../../utils/queryTypes';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from '@material-ui/lab/Alert';\nimport { formatTime } from '../../utils/brt';\nimport Jitter from '../Monitoring/Jitter';\nimport { filterUrl } from '../../utils/filterUrl';\n\nconst format = (datas: QueryResponse) => {\n  const jitter: chartData[] = [];\n\n  for (const value of datas.values) {\n    jitter.push({\n      y: value.value.value,\n      x: formatTime(value.timestamp)\n    });\n  }\n\n  return {\n    jitter\n  };\n};\n\ninterface showChartsDataParam {\n  jitter: chartData[];\n}\n\nconst JitterModule: FC<{}> = () => {\n  const [routesDetails, setRoutesDetails] = useState<RoutesSummary>();\n  const [value] = useState(routesDetails?.testServicesRoutes[0]);\n  const [inputValue, setInputValue] = useState('');\n  const [showCharts, setShowCharts] = useState(false);\n  const [jitterData, setJitterData] = useState<showChartsDataParam>();\n\n  const { response, error } = useFetch<service_states>(\n    `${HOST_IP}/service-state`\n  );\n\n  useEffect(() => {\n    fetch(`${HOST_IP}/routes-summary`)\n      .then(res => res.json())\n      .then((response: { status: string; data: RoutesSummary }) => {\n        setRoutesDetails(response.data);\n      });\n  }, []);\n\n  async function getChartsData(v: any) {\n    const res = filterUrl(v);\n    try {\n      const response = await fetch(\n        `${HOST_IP}/query?timeSeriesPath=storage/jitter/chunk_jitter_${res}`\n      );\n      const matrix = (await response.json()) as APIQueryResponse;\n      var formatdata = format(matrix.data);\n      setJitterData(formatdata);\n      setShowCharts(true);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching from sources</Alert>;\n  }\n\n  // const states: service_states = response.data;\n  const options =\n    routesDetails?.testServicesRoutes !== undefined\n      ? routesDetails.testServicesRoutes\n      : ['Please fill routes'];\n\n  return (\n    <Card>\n      <CardContent>\n        <div>\n          <h4>Jitter</h4>\n          <div style={{ float: 'right', marginTop: '-45px' }}>\n            <Autocomplete\n              value={value}\n              onChange={(event, newValue) => {}}\n              inputValue={inputValue}\n              onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n                getChartsData(newInputValue);\n              }}\n              id=\"controllable-states-demo\"\n              options={options}\n              style={{ width: 300 }}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label=\"Select Route\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </div>\n        </div>\n        <br />\n        <hr />\n        <div>\n          {jitterData !== undefined && showCharts ? (\n            <Jitter value={jitterData.jitter} />\n          ) : null}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default JitterModule;\n","interface Column {\n  label: string;\n  minWidth: number;\n  align: 'right' | 'center' | 'left';\n  format?: (value: number) => string;\n}\n\nexport const columns: Column[] = [\n  { label: 'Name', minWidth: 170, align: 'left' },\n  { label: 'Ping', minWidth: 100, align: 'center' },\n  {\n    label: 'Jitter',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toLocaleString('en-US')\n  },\n  {\n    label: 'Response time',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toLocaleString('en-US')\n  },\n  {\n    label: 'Response length',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toFixed(2)\n  },\n  {\n    label: 'Status',\n    minWidth: 170,\n    align: 'center',\n    format: (value: number) => value.toFixed(2)\n  },\n  {\n    label: '',\n    minWidth: 10,\n    align: 'center',\n    format: (value: number) => value.toFixed(2)\n  }\n];\n","import React, { FC, useState, useEffect } from 'react';\nimport { HOST_IP } from '../../utils/types';\nimport {\n  TimeSeriesPath,\n  MatrixResponse,\n  RouteDetails\n} from '../../utils/queryTypes';\nimport { columns } from './Columns';\nimport TimeInstance from '../../utils/brt';\n\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport WarningOutlinedIcon from '@material-ui/icons/WarningOutlined';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { Badge } from 'reactstrap';\n\ntype APIResponse<MatrixResponse> = { status: string; data: MatrixResponse };\n\ninterface MatrixProps {\n  timeSeriesPath: TimeSeriesPath[];\n  showRouteDetails(status: boolean, details: RouteDetails): void;\n}\n\ninterface ElementProps {\n  timeSeriesPath: TimeSeriesPath;\n  showRouteDetails(status: boolean, details: RouteDetails): void;\n}\n\nconst round = (n: string): number => {\n  const num = parseInt(n, 10);\n  return Math.round(num * 10) / 10;\n};\n\nconst Pad: FC<{}> = () => <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>;\n\nconst Element: FC<ElementProps> = ({ timeSeriesPath, showRouteDetails }) => {\n  const [data, setData] = useState<MatrixResponse>();\n  const [trigger, setTrigger] = useState<number>(0);\n  const [updating, setUpdating] = useState<boolean>(true);\n  const [warning, showWarning] = useState<boolean>(false);\n  const endTimestamp = new Date().getTime() * 1000000 - TimeInstance.Hour;\n\n  const fetchTimeSeriesDetails = async (instance: TimeSeriesPath) => {\n    const monitoringDetails = new Promise<RouteDetails>((resolve, reject) => {\n      async function fetchDetails() {\n        try {\n          const response = await fetch(\n            `${HOST_IP}/query-matrix?routeNameMatrix=${instance.path.matrixName}&endTimestamp=${endTimestamp}`\n          );\n          const matrix = (await response.json()) as APIResponse<RouteDetails>;\n          resolve(matrix.data);\n        } catch (e) {\n          console.error(e);\n          showWarning(true);\n          reject(e);\n        }\n      }\n      fetchDetails();\n    });\n\n    const details = await monitoringDetails;\n    showRouteDetails(true, details);\n  };\n\n  useEffect(() => {\n    async function fetchMatrix(name: string) {\n      try {\n        setUpdating(true);\n        const response = await fetch(\n          `${HOST_IP}/query-matrix?routeNameMatrix=${name}`\n        );\n        const inMatrixResponse = (await response.json()) as APIResponse<\n          MatrixResponse\n        >;\n        setData(inMatrixResponse.data);\n        setTimeout(() => {\n          setUpdating(false);\n          showWarning(false);\n        }, 1000);\n      } catch (e) {\n        console.error(e);\n        showWarning(true);\n        return null;\n      }\n    }\n    fetchMatrix(timeSeriesPath.path.matrixName);\n  }, [trigger, timeSeriesPath.path.matrixName]);\n\n  if (!data) {\n    return (\n      <TableRow className=\"table-data-row\" key={timeSeriesPath.path.matrixName}>\n        <TableCell\n          style={{ width: 170, fontSize: 16, overflowX: 'hidden' }}\n          align=\"left\"\n        >\n          <Badge color=\"light\">{timeSeriesPath.name}</Badge>\n        </TableCell>\n        <TableCell\n          style={{ minWidth: 100, fontSize: 16 }}\n          align=\"center\"\n        ></TableCell>\n        <TableCell\n          style={{ minWidth: 170, fontSize: 16 }}\n          align=\"center\"\n        ></TableCell>\n        <TableCell style={{ minWidth: 170 }} align=\"center\"></TableCell>\n        <TableCell style={{ minWidth: 170 }} align=\"center\"></TableCell>\n        <TableCell\n          style={{ minWidth: 170, fontSize: 16 }}\n          align=\"center\"\n        ></TableCell>\n        <TableCell style={{ minWidth: 10, fontSize: 16 }} align=\"center\">\n          {updating ? (\n            <CircularProgress disableShrink size={15} thickness={4} />\n          ) : (\n            <Pad />\n          )}\n        </TableCell>\n      </TableRow>\n    );\n  }\n\n  setTimeout(() => {\n    setTrigger(trigger + 1);\n  }, 10 * 1000);\n\n  return (\n    <TableRow>\n      <TableCell\n        style={{ maxWidth: 240, fontSize: 16, overflowX: 'hidden' }}\n        align=\"left\"\n      >\n        <Badge color=\"light\">\n          <Tooltip title={timeSeriesPath.name}>\n            <div>{timeSeriesPath.name}</div>\n          </Tooltip>\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 100, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.ping === undefined ? (\n            '-'\n          ) : (\n            <>\n              {data.ping.values === null\n                ? '-'\n                : round(data.ping.values[0].value.avgValue)}\n            </>\n          )}{' '}\n          ms\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 120, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.jitter === undefined ? (\n            '-'\n          ) : (\n            <>\n              {data.jitter.values === null\n                ? '-'\n                : round(data.jitter.values[0].value.value)}\n            </>\n          )}{' '}\n          ms\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 150, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.monitor === undefined ? (\n            '-'\n          ) : (\n            <>\n              {' '}\n              {data.monitor.values === null\n                ? '-'\n                : data.monitor.values[0].value.delay}{' '}\n            </>\n          )}{' '}\n          ms\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"center\">\n        <Badge color=\"warning\">\n          {data.monitor === undefined ? (\n            '-'\n          ) : (\n            <>\n              {data.monitor.values === null\n                ? '-'\n                : data.monitor.values[0].value.resLength}\n            </>\n          )}\n        </Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 170, fontSize: 16 }} align=\"center\">\n        <Badge color=\"success\">{'UP'}</Badge>\n      </TableCell>\n      <TableCell style={{ minWidth: 10, fontSize: 16 }} align=\"center\">\n        {warning ? (\n          <WarningOutlinedIcon />\n        ) : updating ? (\n          // sizes are kept in accordance with the ArrowForwardIcon. Do not change them.\n          <CircularProgress disableShrink size={19} thickness={4} />\n        ) : (\n          <span onClick={() => fetchTimeSeriesDetails(timeSeriesPath)}>\n            <ArrowForwardIcon color=\"primary\" />\n          </span>\n        )}\n      </TableCell>\n    </TableRow>\n  );\n};\n\nconst Matrix: FC<MatrixProps> = ({ timeSeriesPath, showRouteDetails }) => (\n  <TableContainer style={{ maxHeight: '100vh', overflowY: 'hidden' }}>\n    <Table stickyHeader>\n      <TableHead>\n        <TableRow>\n          {columns.map((column, i) => (\n            <TableCell\n              key={i}\n              align={column.align}\n              style={{\n                minWidth: column.minWidth,\n                fontWeight: 600,\n                fontSize: 15\n              }}\n            >\n              {column.label}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {timeSeriesPath.map((series, i) => (\n          <Element\n            timeSeriesPath={series}\n            showRouteDetails={showRouteDetails}\n            key={i}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n);\n\nexport default Matrix;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface ResLengthProps {\n  resLength: chartData[];\n}\n\nconst ResLength: FC<ResLengthProps> = ({ resLength }) => {\n  const series = [\n    {\n      name: 'CPU',\n      data: resLength\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default ResLength;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface DelayProps {\n  delay: chartData[];\n}\n\nconst Delay: FC<DelayProps> = ({ delay }) => {\n  const series = [\n    {\n      name: 'CPU',\n      data: delay\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default Delay;\n","import React, { FC } from 'react';\nimport Chart from 'react-apexcharts';\nimport { chartData } from '../../utils/queryTypes';\n\ninterface PingProps {\n  min: chartData[];\n  mean: chartData[];\n  max: chartData[];\n}\n\nconst Ping: FC<PingProps> = ({ min, mean, max }) => {\n  const series = [\n    {\n      name: 'min',\n      data: min\n    },\n    {\n      name: 'mean',\n      data: mean\n    },\n    {\n      name: 'max',\n      data: max\n    }\n  ];\n  const options = {\n    chart: {\n      type: 'area',\n      xaxis: {\n        type: 'category',\n        categories: [],\n        labels: {\n          show: true,\n          rotate: 0,\n          rotateAlways: false,\n          hideOverlappingLabels: true,\n          trim: true\n        }\n      },\n      animations: {\n        enabled: true,\n        easing: 'easeinout',\n        speed: 800,\n        animateGradually: {\n          enabled: true,\n          delay: 150\n        },\n        dynamicAnimation: {\n          enabled: true,\n          speed: 350\n        }\n      },\n      background: '#fff'\n    }\n  };\n  return <Chart series={series} options={options} height=\"300\" />;\n};\n\nexport default Ping;\n","import React, { FC } from 'react';\nimport { chartData, RouteDetails } from '../../utils/queryTypes';\nimport { formatTime } from '../../utils/brt';\nimport ResLength from './ResLength';\nimport Delay from './Delay';\nimport Ping from './Ping';\nimport Jitter from './Jitter';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\ninterface RouteDetailsProps {\n  routesChains: RouteDetails;\n  showDetails(status: boolean, details: RouteDetails): void;\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\n\nconst format = (data: RouteDetails) => {\n  const responseDetailsDelay: chartData[] = [];\n  const responseDetailsResponse: chartData[] = [];\n  const pingMin: chartData[] = [];\n  const pingMean: chartData[] = [];\n  const pingMax: chartData[] = [];\n  const jitter: chartData[] = [];\n\n  for (const value of data.monitor.values) {\n    responseDetailsDelay.push({\n      y: value.value.delay,\n      x: formatTime(value.timestamp)\n    });\n    responseDetailsResponse.push({\n      y: value.value.resLength,\n      x: formatTime(value.timestamp)\n    });\n  }\n  for (const value of data.ping.values) {\n    pingMin.push({\n      y: value.value.minValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMean.push({\n      y: value.value.avgValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMax.push({\n      y: value.value.maxValue,\n      x: formatTime(value.timestamp)\n    });\n  }\n  for (const value of data.jitter.values) {\n    jitter.push({\n      y: value.value.value,\n      x: formatTime(value.timestamp)\n    });\n  }\n\n  return {\n    responseDetailsDelay,\n    responseDetailsResponse,\n    pingMin,\n    pingMean,\n    pingMax,\n    jitter\n  };\n};\n\nconst RouteDetailsComponent: FC<RouteDetailsProps> = ({\n  routesChains,\n  showDetails\n}) => {\n  const [value, setValue] = React.useState(0);\n  const handleChange = (_event, newValue) => {\n    setValue(newValue);\n  };\n  const data = format(routesChains);\n  return (\n    <>\n      <span onClick={() => showDetails(false, routesChains)}>\n        <ArrowBackIcon color=\"primary\" fontSize=\"large\" />\n      </span>\n      <hr />\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} indicatorColor=\"secondary\">\n          <Tab label=\"Response length\" {...a11yProps(0)} />\n          <Tab label=\"Response delay\" {...a11yProps(1)} />\n          <Tab label=\"Ping\" {...a11yProps(2)} />\n          <Tab label=\"Jitter\" {...a11yProps(3)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <ResLength resLength={data.responseDetailsResponse} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Delay delay={data.responseDetailsDelay} />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Ping min={data.pingMin} mean={data.pingMean} max={data.pingMax} />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <Jitter value={data.jitter} />\n      </TabPanel>\n    </>\n  );\n};\n\nexport default RouteDetailsComponent;\n","import React, { FC, useEffect, useState } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { HOST_IP } from '../../utils/types';\nimport Matrix from './Matrix';\nimport { TimeSeriesPath, RouteDetails } from '../../utils/queryTypes';\nimport RouteDetailsComponent from './RouteDetails';\nimport { Card, CardContent } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Switch from '@material-ui/core/Switch';\n\ninterface MonitoringProps {\n  updateLoader(status: boolean): void;\n}\n\nconst ServicesState: FC<{}> = () => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n  useEffect(() => {\n    fetchState();\n  }, []);\n  const fetchState = () => {\n    fetch(`${HOST_IP}/get-monitoring-services-state`)\n      .then(res => res.json())\n      .then((response: { status: string; data: string }) => {\n        if (response.data === 'active') {\n          setIsActive(true);\n        } else {\n          setIsActive(false);\n        }\n      });\n  };\n  const updateServicesState = () => {\n    fetch(\n      `${HOST_IP}/update-monitoring-services-state?state=${\n        isActive ? 'stop' : 'start'\n      }`\n    )\n      .then(res => res.json())\n      .then((response: boolean) => {\n        if (response) {\n          setIsActive(!isActive);\n        }\n      });\n  };\n  return (\n    <Switch\n      checked={isActive}\n      color=\"primary\"\n      onChange={() => updateServicesState()}\n    />\n  );\n};\n\nconst Monitoring: FC<MonitoringProps> = ({ updateLoader }) => {\n  const { response, error } = useFetch<TimeSeriesPath[]>(\n    `${HOST_IP}/get-route-time-series`\n  );\n  const [showRouteDetails, setShowRouteDetails] = useState<boolean>(false);\n  const [routeDetailsData, setRouteDetailsData] = useState<RouteDetails>();\n  const showDetails = (status: boolean, details: RouteDetails): void => {\n    setShowRouteDetails(status);\n    setRouteDetailsData(details);\n  };\n  useEffect(() => {\n    updateLoader(true);\n  }, [updateLoader]);\n  if (error) {\n    return (\n      <Card>\n        <CardContent>\n          <h4>Monitoring</h4>\n          <hr />\n          <Alert severity=\"error\">Unable to reach the service: error</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n  if (!response.data) {\n    return (\n      <Card>\n        <CardContent>\n          <h4>Monitoring</h4>\n          <hr />\n          <Alert severity=\"info\">Fetching data from sources</Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n  updateLoader(false);\n  return (\n    <Card>\n      <CardContent>\n        {!showRouteDetails || !routeDetailsData ? (\n          <>\n            <h4>\n              Monitoring <ServicesState />\n            </h4>\n            <hr />\n            <Matrix\n              timeSeriesPath={response.data}\n              showRouteDetails={showDetails}\n            />\n          </>\n        ) : (\n          <RouteDetailsComponent\n            routesChains={routeDetailsData}\n            showDetails={showDetails}\n          />\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Monitoring;\n","import React, { FC, useState, useEffect } from 'react';\nimport { useFetch } from '../../utils/useFetch';\nimport { service_states, HOST_IP } from '../../utils/types';\nimport { Card, CardContent, TextField } from '@material-ui/core';\nimport {\n  RoutesSummary,\n  QueryResponse,\n  chartData,\n  APIQueryResponse\n} from '../../utils/queryTypes';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from '@material-ui/lab/Alert';\nimport { formatTime } from '../../utils/brt';\nimport Ping from '../Monitoring/Ping';\nimport { filterUrl } from '../../utils/filterUrl';\n\nconst format = (datas: QueryResponse) => {\n  const pingMin: chartData[] = [];\n  const pingMean: chartData[] = [];\n  const pingMax: chartData[] = [];\n\n  for (const value of datas.values) {\n    pingMin.push({\n      y: value.value.minValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMean.push({\n      y: value.value.avgValue,\n      x: formatTime(value.timestamp)\n    });\n    pingMax.push({\n      y: value.value.maxValue,\n      x: formatTime(value.timestamp)\n    });\n  }\n\n  return {\n    pingMin,\n    pingMean,\n    pingMax\n  };\n};\n\ninterface showChartsDataParam {\n  pingMin: chartData[];\n  pingMean: chartData[];\n  pingMax: chartData[];\n}\n\nconst PingModule: FC<{}> = () => {\n  const [routesDetails, setRoutesDetails] = useState<RoutesSummary>();\n  const [value] = useState(routesDetails?.testServicesRoutes[0]);\n  const [inputValue, setInputValue] = useState('');\n  const [showCharts, setShowCharts] = useState(false);\n  const [pingData, setPingData] = useState<showChartsDataParam>();\n\n  const { response, error } = useFetch<service_states>(\n    `${HOST_IP}/service-state`\n  );\n\n  useEffect(() => {\n    fetch(`${HOST_IP}/routes-summary`)\n      .then(res => res.json())\n      .then((response: { status: string; data: RoutesSummary }) => {\n        setRoutesDetails(response.data);\n      });\n  }, []);\n\n  async function getChartsData(v: any) {\n    const res = filterUrl(v);\n    try {\n      const response = await fetch(\n        `${HOST_IP}/query?timeSeriesPath=storage/ping/chunk_ping_${res}`\n      );\n      const matrix = (await response.json()) as APIQueryResponse;\n      var formatdata = format(matrix.data);\n      setPingData(formatdata);\n      setShowCharts(true);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Unable to reach the service: error</Alert>;\n  }\n  if (!response.data) {\n    return <Alert severity=\"info\">Fetching from sources</Alert>;\n  }\n\n  // TODO: add the status icon for the module\n  // const states: service_states = response.data;\n\n  const options =\n    routesDetails?.testServicesRoutes !== undefined\n      ? routesDetails.testServicesRoutes\n      : ['Please fill routes'];\n\n  return (\n    <Card>\n      <CardContent>\n        <div>\n          <h4>Ping</h4>\n          <div style={{ float: 'right', marginTop: '-45px' }}>\n            <Autocomplete\n              value={value}\n              onChange={(event, newValue) => {}}\n              inputValue={inputValue}\n              onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n                getChartsData(newInputValue);\n              }}\n              id=\"controllable-states-demo\"\n              options={options}\n              style={{ width: 300 }}\n              renderInput={params => (\n                <TextField\n                  {...params}\n                  label=\"Select Route\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n          </div>\n        </div>\n        <br />\n        <hr />\n        <div>\n          {pingData !== undefined && showCharts ? (\n            <Ping\n              min={pingData.pingMin}\n              mean={pingData.pingMean}\n              max={pingData.pingMax}\n            />\n          ) : null}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PingModule;\n","import React, { FC } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Config from '../pages/Config/Config';\nimport Dashboard from '../pages/Dashboard/Dashboard';\nimport FloodPing from '../pages/FloodPing';\nimport Input from '../pages/Input/Input';\nimport JitterModule from '../pages/Jitter/JitterModule';\nimport Monitoring from '../pages/Monitoring/Monitoring';\nimport PingModule from '../pages/Ping/PingModule';\n\ninterface NavigatorProps {\n  updateLoader(status: boolean): void;\n}\n\nconst Navigator: FC<NavigatorProps> = ({ updateLoader }) => {\n  return (\n    <Router>\n      <Switch>\n        <Route\n          exact={true}\n          path=\"/\"\n          render={props => <Dashboard updateLoader={updateLoader} />}\n        />\n        <Route\n          exact={true}\n          path=\"/monitoring\"\n          render={props => <Monitoring updateLoader={updateLoader} />}\n        />\n        <Route path=\"/ping\" component={PingModule} />\n        <Route path=\"/floodping\" component={FloodPing} />\n        <Route path=\"/jitter\" component={JitterModule} />\n        <Route path=\"/quick-input\" component={Input} />\n        <Route path=\"/configurations\" component={Config} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Navigator;\n","import {\n  Collapse,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  AccessAlarm as AccessAlarmIcon,\n  ChevronLeft as ChevronLeftIcon,\n  Dashboard as DashboardIcon,\n  ExpandLess as ExpandLessIcon,\n  ExpandMore as ExpandMoreIcon,\n  NetworkCheck as NetworkCheckIcon,\n  PostAdd as PostAddIcon,\n  Settings as SettingsIcon\n} from '@material-ui/icons';\nimport clsx from 'clsx';\nimport React, { FC, useState } from 'react';\nimport { HashRouter as Router, Link } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  // root class\n  root: {\n    display: 'flex'\n  },\n  // Nested lists\n  nested: {\n    paddingLeft: theme.spacing(4),\n    backgroundColor: '#DCDCDC'\n  },\n  // Drawer styles\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9)\n    }\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar\n  },\n  // SettingsIcon\n  settings: {\n    position: 'absolute',\n    bottom: 0,\n    alignItems: 'center'\n  }\n}));\n\ninterface SidebarProps {\n  open: boolean;\n  handleDrawerClose(): void;\n}\n\nconst Sidebar: FC<SidebarProps> = ({ handleDrawerClose, open }) => {\n  const classes = useStyles();\n\n  // Sidebar element\n  const [testListOpen, setTestListOpen] = useState(false);\n  const showTestList = () => {\n    setTestListOpen(!testListOpen);\n  };\n  const menuItems = (\n    <div>\n      <ListItem button={true} component={Link} to=\"/\">\n        <ListItemIcon>\n          <DashboardIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Dashboard\" />\n      </ListItem>\n      <ListItem button={true} component={Link} to=\"/monitoring\">\n        <ListItemIcon>\n          <AccessAlarmIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Monitoring\" />\n      </ListItem>\n      <ListItem button={true} component={Link} to=\"/quick-input\">\n        <ListItemIcon>\n          <PostAddIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Quick Input\" />\n      </ListItem>\n      <ListItem button={true}>\n        <ListItemIcon>\n          <NetworkCheckIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Tests\" onClick={showTestList} />\n        {open ? (\n          <ExpandLessIcon onClick={showTestList} />\n        ) : (\n          <ExpandMoreIcon onClick={showTestList} />\n        )}\n      </ListItem>\n      {/* Nested List */}\n      <Collapse in={testListOpen} timeout=\"auto\" unmountOnExit={true}>\n        <List component=\"div\" disablePadding={true}>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/ping\"\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Ping\" />\n          </ListItem>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/floodping\"\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"FloodPing\" />\n          </ListItem>\n          <ListItem\n            button={true}\n            component={Link}\n            to=\"/jitter\"\n            className={classes.nested}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Jitter\" />\n          </ListItem>\n        </List>\n      </Collapse>\n      <ListItem button={true} component={Link} to=\"/configurations\">\n        <ListItemIcon>\n          <SettingsIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Config\" />\n      </ListItem>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <Router>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose)\n          }}\n          open={open}\n        >\n          <div className={classes.toolbarIcon}>\n            <IconButton onClick={handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <List>{menuItems}</List>\n        </Drawer>\n      </Router>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import { CssBaseline, Switch, Tooltip } from '@material-ui/core';\nimport { Container } from '@material-ui/core';\nimport { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Menu as MenuIcon } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport React, { ReactElement, useCallback, useState } from 'react';\nimport Navigator from '../router/Navigation';\nimport Sidebar from './Sidebar';\n\nconst drawerWidth = 240;\n\nconst _useStyles = makeStyles(theme => ({\n  // AppBar styles\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  title: {\n    flexGrow: 1\n  },\n  // Toolbar styles\n  toolbar: {\n    paddingRight: 24 // keep right padding when drawer closed\n  },\n  // IconMenu styles\n  menuButton: {\n    marginRight: 36\n  },\n  menuButtonHidden: {\n    display: 'none'\n  }\n}));\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  color: {\n    primary: theme.palette.primary\n  },\n  // Content styles\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto'\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  }\n}));\n\nexport default function BaseLayout(props: any): ReactElement {\n  // Access styles\n  const classes = useStyles();\n  const _classes = _useStyles();\n  const [loader, setLoader] = useState<boolean>(false);\n\n  const updateLoader = useCallback((status: boolean) => {\n    setLoader(status);\n  }, []);\n\n  // Opens and closes the drawer\n  const [open, setOpen] = useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleToggleDarkMode = () => {\n    const { darkMode, toggleDarkMode } = props;\n    toggleDarkMode(!darkMode);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      {/* Navbar */}\n      <div className=\"_navbar\">\n        <AppBar\n          position=\"absolute\"\n          className={clsx(_classes.appBar, open && _classes.appBarShift)}\n        >\n          <Toolbar className={_classes.toolbar}>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              className={clsx(\n                _classes.menuButton,\n                open && _classes.menuButtonHidden\n              )}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap={true}\n              className={_classes.title}\n            >\n              Bench Routes\n            </Typography>\n            <Tooltip title=\"Dark Mode\">\n              <Switch\n                checked={props.darkMode}\n                onChange={handleToggleDarkMode}\n                color=\"default\"\n                name=\"checkedB\"\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n              />\n            </Tooltip>\n          </Toolbar>\n          {loader ? <LinearProgress /> : null}\n        </AppBar>\n      </div>\n      <Sidebar handleDrawerClose={handleDrawerClose} open={open} />\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Navigator updateLoader={updateLoader} />\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import { blue, grey } from '@material-ui/core/colors';\nimport {\n  createMuiTheme,\n  responsiveFontSizes,\n  ThemeProvider\n} from '@material-ui/core/styles';\nimport React, { useState } from 'react';\nimport './App.css';\nimport './assets/bootstrap.min.css';\nimport BaseLayout from './layouts/BaseLayout';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState<boolean>(false);\n  let theme = createMuiTheme({\n    palette: {\n      // Provides you with all\n      // shades of whites\n      type: darkMode ? 'dark' : 'light',\n      primary: blue\n      // secondary: <Color>,\n    },\n    typography: {\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"'\n      ].join(','),\n      fontSize: 12\n    },\n    overrides: {\n      MuiAppBar: {\n        colorPrimary: {\n          backgroundColor: darkMode ? grey[700] : blue[500]\n        }\n      }\n    }\n  });\n  theme = responsiveFontSizes(theme);\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  return (\n    <ThemeProvider theme={theme}>\n      <BaseLayout toggleDarkMode={toggleDarkMode} darkMode={darkMode} />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}